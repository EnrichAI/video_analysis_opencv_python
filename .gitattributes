{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import cv2\n",
    "import os\n",
    "import urllib\n",
    "import datetime\n",
    "import re\n",
    "import time\n",
    "import matplotlib as mpl\n",
    "colors = ['#0055A7', '#2C3E4F', '#26C5ED', '#00cc66', '#D34100', '#FF9700', '#091D32']\n",
    "mpl_update = {'font.size':16,'xtick.labelsize':14,'ytick.labelsize':14,'figure.figsize':[12.0,8.0],\n",
    "              'axes.labelsize':20,'axes.labelcolor':'#677385',\n",
    "              'axes.titlesize':20,'lines.color':'#0055A7','lines.linewidth':3,'text.color':'#677385'}\n",
    "mpl.rcParams.update(mpl_update)\n",
    "from IPython import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "video_file = cv2.VideoCapture('1.mp4')\n",
    "\n",
    "# Read iterates through the frames in the video object and returns:\n",
    "# 1. Logical - True if a frame has been read\n",
    "# 2. Image - an array with the current frame\n",
    "read_file, frame = video_file.read()\n",
    "original = []\n",
    "\n",
    "# Read the video & convert it into a stream url\n",
    "# Assumed input video file, but in reality we will have stream url which will give you stream video\n",
    "# Stream Video > <Frame Object>\n",
    "\n",
    "while read_file:\n",
    "    # Going to grab the frame and create a list for future use \n",
    "    original.append(frame)\n",
    "    \n",
    "    # Use imshow to play video\n",
    "    cv2.imshow('Original video',frame)\n",
    "    \n",
    "    # Get next frame \n",
    "    read_file, frame = video_file.read()\n",
    "    \n",
    "    # Pause and allow for \"q\" button to stop video\n",
    "    if cv2.waitKey(10) & 0xFF == ord('q'): \n",
    "        break\n",
    "\n",
    "cv2.destroyWindow('Original video')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "for j,frame in enumerate(original):\n",
    "    \n",
    "    # Convert the frame to one channel (e.g. gray scale)\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    \n",
    "    cv2.imshow('Gray scale',gray_frame)\n",
    "    \n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "        break\n",
    "\n",
    "cv2.destroyWindow('Gray scale')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(2,3,figsize=(16,8))\n",
    "frame = original[20] # experimenting with 20th frame\n",
    "gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "plt.subplot(2,3,1);plt.imshow(gray_frame,cmap='Greys_r'); plt.axis('off'); plt.title('No smoothing');\n",
    "\n",
    "smooth9 = cv2.GaussianBlur(gray_frame, (9,9), 0)\n",
    "plt.subplot(2,3,2);plt.imshow(smooth9,cmap='Greys_r'); plt.axis('off'); plt.title('$k_x = k_y = 9$');\n",
    "\n",
    "smooth15 = cv2.GaussianBlur(gray_frame, (15, 15), 0)\n",
    "plt.subplot(2,3,3);plt.imshow(smooth15,cmap='Greys_r'); plt.axis('off'); plt.title('$k_x = k_y = 15$');\n",
    "\n",
    "smooth31 = cv2.GaussianBlur(gray_frame, (31, 31), 0)\n",
    "plt.subplot(2,3,4);plt.imshow(smooth31,cmap='Greys_r'); plt.axis('off'); plt.title('$k_x = k_y = 31$');\n",
    "\n",
    "smooth45 = cv2.GaussianBlur(gray_frame, (45,45), 0)\n",
    "plt.subplot(2,3,5);plt.imshow(smooth45,cmap='Greys_r'); plt.axis('off'); plt.title('$k_x = k_y = 45$');\n",
    "\n",
    "smooth61 = cv2.GaussianBlur(gray_frame, (61, 61), 0)\n",
    "plt.subplot(2,3,6);plt.imshow(smooth61,cmap='Greys_r'); plt.axis('off'); plt.title('$k_x = k_y = 61$');\n",
    "plt.savefig('D:\\dev\\kernel images\\smooth_images_k.png')\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "k = 15 # Define Gaussian kernel size\n",
    "\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    \n",
    "    # Apply a Gaussian blur to the gray scale frame \n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    cv2.imshow('Smooth', smooth_frame)\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "        break\n",
    "        \n",
    "cv2.destroyWindow('Smooth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "alpha = 0.2 # Define weighting coefficient\n",
    "running_avg = None # Define variable for running average\n",
    "\n",
    "k = 15\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    # If this is the first frame, making running avg current frame\n",
    "    # Otherwise, update running average with new smooth frame\n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    else:\n",
    "        cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    cv2.imshow('Running average', cv2.convertScaleAbs(running_avg))\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "        break\n",
    "\n",
    "cv2.destroyWindow('Running average')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1,2,figsize=(16,6))\n",
    "plt.subplot(1,2,1);\n",
    "plt.imshow(original[70],cmap='Greys_r'); plt.axis('off'); \n",
    "plt.subplot(1,2,2);\n",
    "plt.imshow(original[73],cmap='Greys_r'); plt.axis('off');  \n",
    "plt.savefig('D:\\dev\\kernel images/bg-fg.png'); plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "alpha = 0.2 \n",
    "running_avg = None \n",
    "k = 15\n",
    "for j, frame in enumerate(original):\n",
    "\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    # If this is the first frame, making running avg current frame\n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "        \n",
    "    # Find |difference| between current smoothed frame and running average\n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    \n",
    "    # Then add current frame to running average after\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "\n",
    "    cv2.imshow('Difference', diff)\n",
    "   # plt.imshow(diff); plt.axis('off'); plt.tight_layout();\n",
    "    #plt.savefig('D:\\dev\\kernel images\\Color difference\\color-diff'+str(j).zfill(3)+'.png',dpi=640.0/12)\n",
    "\n",
    "    #plt.imshow(frame); plt.axis('off'); plt.tight_layout();\n",
    "    #plt.savefig('D:\\dev\\kernel images\\Color difference\\orig-frame'+str(j).zfill(3)+'.png',dpi=640.0/12)\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "         break\n",
    "            \n",
    "cv2.destroyWindow('Difference')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "thresh = 35 # All pixels with differences above this value will be set to 1\n",
    "\n",
    "alpha = 0.2\n",
    "running_avg = None \n",
    "k = 15\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    # For all pixels with a difference > thresh, turn pixel to 1, otherwise 0\n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "    \n",
    "    cv2.imshow('Thresholded difference', subtracted)\n",
    "    \n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "        break\n",
    "\n",
    "cv2.destroyWindow('Thresholded difference')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "motion_fractions = []\n",
    "\n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "running_avg = None \n",
    "k = 15\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k,k), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "    \n",
    "    # Calculate the fraction of pixels where motion is detected\n",
    "    # i.e. where subtracted==1\n",
    "    motion_fraction = (sum(sum(subtracted))/\n",
    "                       (subtracted.shape[0]*subtracted.shape[1]))\n",
    "\n",
    "    motion_fractions.append(motion_fraction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "plt.plot(motion_fractions);\n",
    "plt.xlabel('Frame number');\n",
    "plt.ylabel('Fraction of frame in motion');\n",
    "plt.title('Fraction of frame in motion over time');\n",
    "plt.savefig('D:\\dev\\kernel images/red-frame-fraction.png');\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "plt.plot(motion_fractions);\n",
    "plt.axhline(y=0.004,color=colors[3]);\n",
    "plt.xlabel('Frame number');\n",
    "plt.ylabel('Fraction of frame in motion');\n",
    "plt.title('Fraction of frame in motion over time');\n",
    "plt.savefig('D:\\dev\\kernel images/green-frame-fraction-with-horizontal.png');\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "plt.plot(motion_fractions);\n",
    "plt.axhline(y=0.004,color=colors[3]);\n",
    "plt.axvline(x=5,color=colors[3], linestyle='--');\n",
    "plt.axvline(x=215,color=colors[3], linestyle='--');\n",
    "plt.xlabel('Frame number');\n",
    "plt.ylabel('Fraction of frame in motion');\n",
    "plt.title('Fraction of frame in motion over time');\n",
    "plt.savefig('D:\\dev\\kernel images/green-frame-fraction-with-horizontal-and-vertical.png');\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "vehicle detected beginning at frame 606\n",
      "vehicle detected beginning at frame 656\n",
      "vehicle detected beginning at frame 706\n",
      "vehicle detected beginning at frame 756\n"
     ]
    }
   ],
   "source": [
    "history_length = 50\n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "k = 15\n",
    "\n",
    "frame_thresh = 0.025\n",
    "running_avg = None \n",
    "history = pd.DataFrame(data=[[0,0]],columns=['Fraction','In_motion'])\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (21,21), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "    \n",
    "    motion_fraction = (sum(sum(subtracted))/\n",
    "                       (subtracted.shape[0]*subtracted.shape[1]))\n",
    "    \n",
    "    history.loc[len(history)+1] = [motion_fraction, motion_fraction>frame_thresh]\n",
    "    \n",
    "    detect = (history.tail(history_length).In_motion.sum()==history_length)\n",
    "    \n",
    "    if detect: \n",
    "        print ('vehicle detected beginning at frame', j-history_length)\n",
    "        # Reset history\n",
    "        history = pd.DataFrame(data=[[0,0]],columns=['Fraction','In_motion'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "vehicle detected beginning at frame 606\n",
      "vehicle detected beginning at frame 607\n",
      "vehicle detected beginning at frame 608\n",
      "vehicle detected beginning at frame 609\n",
      "vehicle detected beginning at frame 610\n",
      "vehicle detected beginning at frame 611\n",
      "vehicle detected beginning at frame 612\n",
      "vehicle detected beginning at frame 613\n",
      "vehicle detected beginning at frame 614\n",
      "vehicle detected beginning at frame 615\n",
      "vehicle detected beginning at frame 616\n",
      "vehicle detected beginning at frame 617\n",
      "vehicle detected beginning at frame 618\n",
      "vehicle detected beginning at frame 619\n",
      "vehicle detected beginning at frame 620\n",
      "vehicle detected beginning at frame 621\n",
      "vehicle detected beginning at frame 622\n",
      "vehicle detected beginning at frame 623\n",
      "vehicle detected beginning at frame 624\n",
      "vehicle detected beginning at frame 625\n",
      "vehicle detected beginning at frame 626\n",
      "vehicle detected beginning at frame 627\n",
      "vehicle detected beginning at frame 628\n",
      "vehicle detected beginning at frame 629\n",
      "vehicle detected beginning at frame 630\n",
      "vehicle detected beginning at frame 631\n",
      "vehicle detected beginning at frame 632\n",
      "vehicle detected beginning at frame 633\n",
      "vehicle detected beginning at frame 634\n",
      "vehicle detected beginning at frame 635\n",
      "vehicle detected beginning at frame 636\n",
      "vehicle detected beginning at frame 637\n",
      "vehicle detected beginning at frame 638\n",
      "vehicle detected beginning at frame 639\n",
      "vehicle detected beginning at frame 640\n",
      "vehicle detected beginning at frame 641\n",
      "vehicle detected beginning at frame 642\n",
      "vehicle detected beginning at frame 643\n",
      "vehicle detected beginning at frame 644\n",
      "vehicle detected beginning at frame 645\n",
      "vehicle detected beginning at frame 646\n",
      "vehicle detected beginning at frame 647\n",
      "vehicle detected beginning at frame 648\n",
      "vehicle detected beginning at frame 649\n",
      "vehicle detected beginning at frame 650\n",
      "vehicle detected beginning at frame 651\n",
      "vehicle detected beginning at frame 652\n",
      "vehicle detected beginning at frame 653\n",
      "vehicle detected beginning at frame 654\n",
      "vehicle detected beginning at frame 655\n",
      "vehicle detected beginning at frame 656\n",
      "vehicle detected beginning at frame 657\n",
      "vehicle detected beginning at frame 658\n",
      "vehicle detected beginning at frame 659\n",
      "vehicle detected beginning at frame 660\n",
      "vehicle detected beginning at frame 661\n",
      "vehicle detected beginning at frame 662\n",
      "vehicle detected beginning at frame 663\n",
      "vehicle detected beginning at frame 664\n",
      "vehicle detected beginning at frame 665\n",
      "vehicle detected beginning at frame 666\n",
      "vehicle detected beginning at frame 667\n",
      "vehicle detected beginning at frame 668\n",
      "vehicle detected beginning at frame 669\n",
      "vehicle detected beginning at frame 670\n",
      "vehicle detected beginning at frame 671\n",
      "vehicle detected beginning at frame 672\n",
      "vehicle detected beginning at frame 673\n",
      "vehicle detected beginning at frame 674\n",
      "vehicle detected beginning at frame 675\n",
      "vehicle detected beginning at frame 676\n",
      "vehicle detected beginning at frame 677\n",
      "vehicle detected beginning at frame 678\n",
      "vehicle detected beginning at frame 679\n",
      "vehicle detected beginning at frame 680\n",
      "vehicle detected beginning at frame 681\n",
      "vehicle detected beginning at frame 682\n",
      "vehicle detected beginning at frame 683\n",
      "vehicle detected beginning at frame 684\n",
      "vehicle detected beginning at frame 685\n",
      "vehicle detected beginning at frame 686\n",
      "vehicle detected beginning at frame 687\n",
      "vehicle detected beginning at frame 688\n",
      "vehicle detected beginning at frame 689\n",
      "vehicle detected beginning at frame 690\n",
      "vehicle detected beginning at frame 691\n",
      "vehicle detected beginning at frame 692\n",
      "vehicle detected beginning at frame 693\n",
      "vehicle detected beginning at frame 694\n",
      "vehicle detected beginning at frame 695\n",
      "vehicle detected beginning at frame 696\n",
      "vehicle detected beginning at frame 697\n",
      "vehicle detected beginning at frame 698\n",
      "vehicle detected beginning at frame 699\n",
      "vehicle detected beginning at frame 700\n",
      "vehicle detected beginning at frame 701\n",
      "vehicle detected beginning at frame 702\n",
      "vehicle detected beginning at frame 703\n",
      "vehicle detected beginning at frame 704\n",
      "vehicle detected beginning at frame 705\n",
      "vehicle detected beginning at frame 706\n",
      "vehicle detected beginning at frame 707\n",
      "vehicle detected beginning at frame 708\n",
      "vehicle detected beginning at frame 709\n",
      "vehicle detected beginning at frame 710\n",
      "vehicle detected beginning at frame 711\n",
      "vehicle detected beginning at frame 712\n",
      "vehicle detected beginning at frame 713\n",
      "vehicle detected beginning at frame 714\n",
      "vehicle detected beginning at frame 715\n",
      "vehicle detected beginning at frame 716\n",
      "vehicle detected beginning at frame 717\n",
      "vehicle detected beginning at frame 718\n",
      "vehicle detected beginning at frame 719\n",
      "vehicle detected beginning at frame 720\n",
      "vehicle detected beginning at frame 721\n",
      "vehicle detected beginning at frame 722\n",
      "vehicle detected beginning at frame 723\n",
      "vehicle detected beginning at frame 724\n",
      "vehicle detected beginning at frame 725\n",
      "vehicle detected beginning at frame 726\n",
      "vehicle detected beginning at frame 727\n",
      "vehicle detected beginning at frame 728\n",
      "vehicle detected beginning at frame 729\n",
      "vehicle detected beginning at frame 730\n",
      "vehicle detected beginning at frame 731\n",
      "vehicle detected beginning at frame 732\n",
      "vehicle detected beginning at frame 733\n",
      "vehicle detected beginning at frame 734\n",
      "vehicle detected beginning at frame 735\n",
      "vehicle detected beginning at frame 736\n",
      "vehicle detected beginning at frame 737\n",
      "vehicle detected beginning at frame 738\n",
      "vehicle detected beginning at frame 739\n",
      "vehicle detected beginning at frame 740\n",
      "vehicle detected beginning at frame 741\n",
      "vehicle detected beginning at frame 742\n",
      "vehicle detected beginning at frame 743\n",
      "vehicle detected beginning at frame 744\n",
      "vehicle detected beginning at frame 745\n",
      "vehicle detected beginning at frame 746\n",
      "vehicle detected beginning at frame 747\n",
      "vehicle detected beginning at frame 748\n",
      "vehicle detected beginning at frame 749\n",
      "vehicle detected beginning at frame 750\n",
      "vehicle detected beginning at frame 751\n",
      "vehicle detected beginning at frame 752\n",
      "vehicle detected beginning at frame 753\n",
      "vehicle detected beginning at frame 754\n",
      "vehicle detected beginning at frame 755\n",
      "vehicle detected beginning at frame 756\n"
     ]
    }
   ],
   "source": [
    "history_length = 50\n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "k = 15\n",
    "\n",
    "frame_thresh = 0.025\n",
    "running_avg = None \n",
    "history = pd.DataFrame(data=[[0,0]],columns=['Fraction','In_motion'])\n",
    "for j, frame in enumerate(original):\n",
    "    \n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (21,21), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "    \n",
    "    motion_fraction = (sum(sum(subtracted))/\n",
    "                       (subtracted.shape[0]*subtracted.shape[1]))\n",
    "    \n",
    "    history.loc[len(history)+1] = [motion_fraction, motion_fraction>frame_thresh]\n",
    "    \n",
    "    detect = (history.tail(history_length).In_motion.sum()==history_length)\n",
    "    \n",
    "    if detect: \n",
    "        print ('vehicle detected beginning at frame', j-history_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ax, fig = plt.subplots(figsize=(12,9))\n",
    "plt.imshow(original[73]); plt.axis('off');\n",
    "plt.savefig('D:\\dev\\kernel images/original73.png',dpi=640.0/12);\n",
    "plt.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x263bb32bf98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-e55f798a6c11>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     45\u001b[0m     \u001b[0mdisplay\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclear_output\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwait\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     46\u001b[0m     \u001b[0mdisplay\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdisplay\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgcf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 47\u001b[1;33m     \u001b[0mplt\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'D:\\dev\\kernel images/gree-left-and-right'\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mj\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mzfill\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m'.png'\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdpi\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m640.0\u001b[0m\u001b[1;33m/\u001b[0m\u001b[1;36m12\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     48\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mcv2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwaitKey\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m&\u001b[0m \u001b[1;36m0xFF\u001b[0m \u001b[1;33m==\u001b[0m \u001b[0mord\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'q'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     49\u001b[0m             \u001b[1;32mbreak\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m    695\u001b[0m \u001b[1;32mdef\u001b[0m \u001b[0msavefig\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    696\u001b[0m     \u001b[0mfig\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgcf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 697\u001b[1;33m     \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    698\u001b[0m     \u001b[0mfig\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m   \u001b[1;31m# need this if 'transparent=True' to reset colors\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    699\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\figure.py\u001b[0m in \u001b[0;36msavefig\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1571\u001b[0m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mset_frameon\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mframeon\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1572\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1573\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1574\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1575\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mframeon\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[1;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, **kwargs)\u001b[0m\n\u001b[0;32m   2250\u001b[0m                 \u001b[0morientation\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0morientation\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2251\u001b[0m                 \u001b[0mbbox_inches_restore\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0m_bbox_inches_restore\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2252\u001b[1;33m                 **kwargs)\n\u001b[0m\u001b[0;32m   2253\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2254\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mbbox_inches\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mrestore_bbox\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[1;34m(self, filename_or_obj, *args, **kwargs)\u001b[0m\n\u001b[0;32m    543\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    544\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mprint_png\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilename_or_obj\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 545\u001b[1;33m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    546\u001b[0m         \u001b[0mrenderer\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_renderer\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    547\u001b[0m         \u001b[0moriginal_dpi\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdpi\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\backends\\backend_agg.py\u001b[0m in \u001b[0;36mdraw\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    462\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    463\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 464\u001b[1;33m             \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    465\u001b[0m         \u001b[1;32mfinally\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    466\u001b[0m             \u001b[0mRendererAgg\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlock\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrelease\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[1;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m         \u001b[0mbefore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m         \u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m         \u001b[0mafter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\figure.py\u001b[0m in \u001b[0;36mdraw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m   1142\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1143\u001b[0m             mimage._draw_list_compositing_images(\n\u001b[1;32m-> 1144\u001b[1;33m                 renderer, self, dsu, self.suppressComposite)\n\u001b[0m\u001b[0;32m   1145\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1146\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'figure'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[1;34m(renderer, parent, dsu, suppress_composite)\u001b[0m\n\u001b[0;32m    137\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[1;32mor\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    138\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mzorder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ma\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdsu\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 139\u001b[1;33m             \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    140\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    141\u001b[0m         \u001b[1;31m# Composite any adjacent images together\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[1;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m         \u001b[0mbefore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m         \u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m         \u001b[0mafter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\axes\\_base.py\u001b[0m in \u001b[0;36mdraw\u001b[1;34m(self, renderer, inframe)\u001b[0m\n\u001b[0;32m   2424\u001b[0m             \u001b[0mrenderer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstop_rasterizing\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2425\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 2426\u001b[1;33m         \u001b[0mmimage\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_draw_list_compositing_images\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mdsu\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   2427\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   2428\u001b[0m         \u001b[0mrenderer\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mclose_group\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'axes'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\image.py\u001b[0m in \u001b[0;36m_draw_list_compositing_images\u001b[1;34m(renderer, parent, dsu, suppress_composite)\u001b[0m\n\u001b[0;32m    137\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[0mnot_composite\u001b[0m \u001b[1;32mor\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mhas_images\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    138\u001b[0m         \u001b[1;32mfor\u001b[0m \u001b[0mzorder\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0ma\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdsu\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 139\u001b[1;33m             \u001b[0ma\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    140\u001b[0m     \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    141\u001b[0m         \u001b[1;31m# Composite any adjacent images together\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\artist.py\u001b[0m in \u001b[0;36mdraw_wrapper\u001b[1;34m(artist, renderer, *args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mdraw_wrapper\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m         \u001b[0mbefore\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m         \u001b[0mdraw\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m         \u001b[0mafter\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0martist\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\legend.py\u001b[0m in \u001b[0;36mdraw\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m    469\u001b[0m         \u001b[1;31m# update the location and size of the legend. This needs to\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    470\u001b[0m         \u001b[1;31m# be done in any case to clip the figure right.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 471\u001b[1;33m         \u001b[0mbbox\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_legend_box\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_window_extent\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    472\u001b[0m         self.legendPatch.set_bounds(bbox.x0, bbox.y0,\n\u001b[0;32m    473\u001b[0m                                     bbox.width, bbox.height)\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\offsetbox.py\u001b[0m in \u001b[0;36mget_window_extent\u001b[1;34m(self, renderer)\u001b[0m\n\u001b[0;32m    268\u001b[0m         '''\n\u001b[0;32m    269\u001b[0m         \u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mh\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moffsets\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_extent_offsets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 270\u001b[1;33m         \u001b[0mpx\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpy\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget_offset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mh\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    271\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mmtransforms\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mBbox\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfrom_bounds\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpx\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mxd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpy\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0myd\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mw\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mh\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    272\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\offsetbox.py\u001b[0m in \u001b[0;36mget_offset\u001b[1;34m(self, width, height, xdescent, ydescent, renderer)\u001b[0m\n\u001b[0;32m    219\u001b[0m         \"\"\"\n\u001b[0;32m    220\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0msix\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcallable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_offset\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 221\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_offset\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwidth\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxdescent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mydescent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    222\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    223\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_offset\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\legend.py\u001b[0m in \u001b[0;36m_findoffset_best\u001b[1;34m(self, width, height, xdescent, ydescent, renderer)\u001b[0m\n\u001b[0;32m    432\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_findoffset_best\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mwidth\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mxdescent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mydescent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    433\u001b[0m         \u001b[1;34m\"Helper function to locate the legend at its best position\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 434\u001b[1;33m         \u001b[0mox\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moy\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_find_best_position\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mwidth\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mheight\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrenderer\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    435\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mox\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mxdescent\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0moy\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mydescent\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    436\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\legend.py\u001b[0m in \u001b[0;36m_find_best_position\u001b[1;34m(self, width, height, renderer, consider)\u001b[0m\n\u001b[0;32m    959\u001b[0m                 \u001b[1;31m# this may (or may not) result in a significant\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    960\u001b[0m                 \u001b[1;31m# slowdown if lines with many vertices are present.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 961\u001b[1;33m                 \u001b[1;32mif\u001b[0m \u001b[0mline\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mintersects_bbox\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mlegendBox\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    962\u001b[0m                     \u001b[0mbadness\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    963\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Anaconda3\\envs\\test\\lib\\site-packages\\matplotlib\\path.py\u001b[0m in \u001b[0;36mintersects_bbox\u001b[1;34m(self, bbox, filled)\u001b[0m\n\u001b[0;32m    566\u001b[0m         rectangle = self.unit_rectangle().transformed(\n\u001b[0;32m    567\u001b[0m             BboxTransformTo(bbox))\n\u001b[1;32m--> 568\u001b[1;33m         \u001b[0mresult\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mintersects_path\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mrectangle\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mfilled\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    569\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    570\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAu0AAAI4CAYAAADeTdf7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAIABJREFUeJzs3XmcHHWd//FX5YIkkATISQ6uIARERIZwyCkEhEVBBYRV\n8GLZAkFXqXW1VlZkpZS1xJ+raImoiIiAuB6IcgjIFY5MALkhct834SZX/f6omtCZ9Bw16ZnuJK/n\n4zGPnq76VtWnphvy7m9/61tBnudIkiRJal2Dml2AJEmSpO4Z2iVJkqQWZ2iXJEmSWpyhXZIkSWpx\nhnZJkiSpxRnaJUmSpBY3pNkFSGpdYZQMARYCl2dpvFez61kRYZS8H/gaMAMYDfw2S+ODmlvVwFmV\nXsu+CqPkbOBjwNQsjR9rdj2rG//+0ooxtEv9IIySnm6A8Kksjc8ciFp6EkbJY8CbWRpPb3Yt/SWM\nkk2A3wMvAD8FXgHu6mGbvYDLOi1eBDwD3AB8N0vja7vZfijwCeCjwNbAGOAl4FbgXOCsLI0X1dmu\nI9gcnqXx2b05PxXCKPkG8J/ALt29Nuof/v2l/mVol/rX17tYfuuAVtFHWRovCqNkBvBas2tZQbOA\nNYB/y9L4/IrbPgicVf4+EmgDPgwcGEbJwVka/1/nDcIomQb8kSKsPwX8qXycCOxX1nNMGCUfzNL4\niT6cT2Wr0Gu5Iv4d+AbFa6GB599fWgGGdqkfZWl8YrNrWFFZGt/T7BoaYP3ysS8B+YHOr2MYJV8F\n/hs4Bfi/TuvWAi6mGIbzM+DYLI3fqFk/EsiAjwN/DqNkx9r1/WkVeS37LEvjJ4Enm13H6sq/v7Ri\nDO1Sk9UMh9gA+BBwJDAduC5L473CKFkDOIqih3YLit7a14C5QJql8SVd7Hcq8CXg/cDUcpv7gT9k\naXxy5+EfnYb0/DRL4yO7GwcdRskY4CsUvc5TgdeBm4D/ydL4ik5tO451AvBn4GRgJ4r/B80B/iNL\n4xt7/Ucr9nko8FmK3uyhwDzgVxTDVhZ0Om6Ha8Io6fh9Rb7C/ylFaJ8eRsmYLI1fqlkXUQT2q4Ej\nszReZqhUlsavhVHySWBTYHvgcxThv1vlEJ+vAHtQfAh5neJDyLVAnKXxiz1sX/e1rB3SAEwu698S\neAO4BDi+DFs9CqPkSOAnwOHAc8BXgXeX+/oj8MUsjeeHUbItxd9vR4r3wOXA57I0fqTOPjcr97Mn\nMLbc72XASVka31/T7rGyflj2dV6cpfGQsk2XY6p7837qdKw3y7YnAQcDE4BHgB8D3+n8uvfwd+vt\nOZ4BfAbYP0vji+rs570U74fzsjQ+tGb5SODzFEO1pgM5cBvwvSyNz+u0j9r/Vv8K/BewA7AO3YxF\n7+vfP4yS6RR/659S/HdwCrA7xftiNsV75q4wSsYDCfBPZS23Af+epfFVdWoZAoQU78MtgMHAPcAZ\nwI+qvDZSK3H2GKl1nAacSPmPKcU/WADjgP8HrEXxj+mpFAFoW+AvZQBcRhgl2wN/B44FHiv392vg\nVYp/hAEeoBi+8wrwYvl7x88fuys0jJJ1gespPhS8UNb3O+C9wF/L8FbPTOA6in+Qf0IR4HcFrgij\nZNPujtnp+P9Tns9mwNnAD8p9fovibzK00zleUz7/ec05LhcQ+6jzuPR/KR+/0VU4yNJ4MUUAgeID\nWbfCKJlM8eHmCOB24H8pAuVD5bIJlate3ueAMyn+ZqcBdwOHUbyewyru68MU76GnKL5VuB/4NHBB\nGSyvAQKKoHY9cABwYRglQe1OwijZgeK8PwbcCHynfDwcaA+j5D01zU+l/ut8Uk/FVng/1RpGEWoP\npHgfn0ExfOrbQNzTMft4jr8oH4/oYnefKB/PrNn/OhT/zZ1M8aHtZ+V+JgDnhlFyYhf72pnig+cw\nitfprHL7rvT571/amOK8x5bb/xXYB/hbGexvBN4DnAf8BtgGuDiMkim1Oynfq38Bvg+Mong9T6d4\nPU+jOH9ppWRPu9SPuvgH8aEuLkJ9N/DuLI0f7rT8OWBalsaPd9r3GIrA8+0wSn6dpfFb5fI1KP5R\nWwf4aOcx3B3/yGVp/ABwYhmw36w4lOfbwOYUvVbH1Oz72xQB5AdhlFySpfGjnbb7AJ0usAyj5LMU\nIek4iuDYrTBKdqEYG/swMDNL42fK5V+hCIr7Al+g6PHvOMchFD3JP2vQBXL/Wj7emqXxqzW1bUTR\nC76QIvB05wpgCbBxGCUTszTubpzvIRSv57FZGp9Wu6IcjrPcBa19sA/QlqXxneV+A4qAdDCwP52G\nAfXgA8DuWRpfV+5rEEUI24viw+anant4wyj5BUUQ3Q+4qGabs4C1gUM7tf8YRRg7K4ySrbI0zrM0\nPrX8MFnpda7yfuq06VSKD8bv6xjeFEbJfwP3AceHUfKt8sNZd8eueo7XhFFyP/DBzt/whFGyJsX7\n5EmW/Xbp+xTfCByfpfGpNe2Hl+f3X2GU/DZL49s7lbcPxTdFP+3uHDr09e9fYw/gy1kaL/3WKYyS\nr1N0MtxE8aHquCyNl5TrrqAI4J+neP06/BfF++x7FOe8uGw/mOLDxyfDKLmg3jcVUquzp13qX1+r\n8/PJLtp+q05gJ0vjNzsH9nL5SxQ9UmMpglCHAykCxf/Vu+hyRadaKz8U/DPwMp16FMsx0z+guOjz\n8DqbX1VnRpQzKMLrzF6W8Ony8aSOgFUeexFwPMVX/1319PfFxmGUnFj+fDuMkr9RvI4vUXwFX2tS\n+fhMx4eorpRhv2NIy/rdta2x3Nj3LI1fzdL4zV5u353vdgT2cr85xbch0PvXpsPZHYG93NcSigAK\nxQed8zq177jQ9901y3ahGEJ0Tef2WRr/imIGny0phtisiBV5Px1Xez1C+cHrQooPWL355qgv53gW\nsCbFUJdaB1JMZXp2TVAdT/FtyQ21gb3c/xvAlym+8TisTm3tvQ3sDXI/RWdArY5vFoYAX+oI7KWz\nKf6/sfQ9UwbzzwKPUxPYYem3W1H59GONLV0aGPa0S/0oS+Og51ZL3dTVijBKtqLoTdqZIuCt0anJ\n5Jrfdygf/1Lh2FVsQREabuw0lrvDFRRhYJs669o7L8jS+K0wSp6lCDq90TFc4IrOK7I0vjuMkieB\nTcMoWau2F3wFbEQR0mu9AOyRpfFtDdh/b/yBYgx4FkbJfhRjza8D7m7g+NzlXhug45uS3r423e2r\n4yLguXXWdXworR3q0OXrXLN8B4r32ewu2vRGX99Pz2dp/FCd/VX5m/XlHH9BMYzuExTj5zssNzSG\n4sPWICDo4lu/jv+PzKizrsv/H/WTWzqFcnj7PXNvlsbLzHqUpfHC8v8bte+ZGRRTqz4NnFAzrr7W\nm9Q/X6nl2dMutY66wyPKMcA3UfSs3QP8iCLAfZ2iVw+WDfFjysfleucbZHT52NXFiR3Lx9RZVy/k\nQzG8Y3CDjz+6i/VVXZ6lcVB+ABsLHE0xnOHCsiezVsdrOK78RqJL5cWBHcGu21ltymE+21PMNT+L\nYozuncBDYZQcW+VkulHvtekYdtPb16bD/G721d262rHjK/I+q6Kv76fu3svQu79Z5XMsv437G7Bj\nGCXvAAijZBLF+6I9S+Pa+w+sVz5uT/1v/b5crl+rzrEHelrGqu+ZjvW175mO892M+uf7NYoOh3rn\nK7U8e9ql1tFVj+kJFP/QLDfbSRglJ1CMH67VESYm0z86/gGd2MX6SZ3a9efxlxtO1J/Hz9L4eYre\n7jUoLr79AcU44o71D5Q9s5MoLrDtfHOmWu+j6Dh5oIfx7B37vhM4pByfvzWwN8V1AN8Po+SVLI1/\n0e0OVj4D9T5r2vuJvp/jLyjGgB9BMevMxyk+JHR+D3Rs9+0sjb9UsbaVcYaVjvP9TZbGh3TbUloJ\n2dMutb7pFGOk613YtVudZTeUj/v2cv+LqdaTejfwFrBNGCWj6qzfo3y8ucI+q7ilfNy984py6rxJ\nwLwGDY3pymkU33ocXM7UU+uM8jHuPBtKh/ICxI7rAU6vcuAsjRdlaTw3S+Nv8vbY3AOr7GMl0eXr\nXKr3PusYw1zl/dzM91NfzhHgAoqZoA4v32NHAAsoLtasdSNF+N5lhSvtnb78/RvpTorZsHYsP9xK\nqxRDu9T6HqIYbrFl7cIwSv6VYl7nzn5PMa72w2GUHNx5Zecp0oDngfE9DefoUF70eA7FV/vLTOdW\nTtt4LEWA6HzBaaN0TNl2QhglHV+Hd8zN/B3enkqw35QXKZ5YPu08cPbbwL0UQezH5aweS4VRMoLi\nHHagmH3kf3s6XhglM+sMxYG3p3p8vbe1r0SuBv4B7B5GyTIfSso51Xek+AB5fc2q58vHaRWO08z3\nU1/OkXJ89wUU53k88E7gT+U3QbXtngTOBXYIo+Qr5YWaywijZHoYJRs06Hz68vdvmCyNF1J8+zUF\n+H+d/9sDCKNk/bC4M7C00vGTqNT6vksRzmeHUXI+xawtMyn+Qf8t8JHaxuWFnQdT3JXz/DBKrqQY\nEz+c4gKsXSmG23S4nLfnPL6GInDf0sOUaB0XxX4+jJKZwFUU88kfQjFe9Oiszo1yGiFL46vDKDkV\n+CJwZxglF1CE1n+iuEj2Koo5o/vb+RQ3JXpfGCV7Zml8eVnfK2GUvJ9iOr1/AfYPo+QvFGOEJ5Z1\nTqDoPf1A1ru7oR4BHBVGyVUUIe8lim9gPkBxYd33GnpmLSBL4yVhlHwCuBT4bRglv6f4MLQ5xbzu\nLwNHdLoQ9wqKnuVTwijZmuLvtCRL47pXJJbHadr7qY/n2OEXFDNRJTXP6zma4r2SUEx3eC3wLMU3\nCFsAbRTTetYbGlRV5b9/P/ga8C6KWWQOKKeGfILiv7lNKW7q9h8UH4aklYo97VKLK8PzARTDMQ6l\nmKLudYqe3Iu72OZGiqnQfkxx05IvUAylGMXbPcQdvk4xROMdFEM2/pvizqzd1fQ8xcVtKTCeIvB8\nhKJHcO8sjX/czeYrLEvj4ynG8d5PMWvG5yjCQgzsU/a49asySHXMKnNyp3UPUYShf6UIBx+kuBHV\nBylujnQksH2Wxt1egFrjVxQ9whMoLkj+N4oPWucA22ZpPNAzfQyILI1nA9tR9BbvRPFhcUeK827L\n0ri9U/s7gE9RhNLPUryXe7y5TzPfT1XPscZVwIMUF2I+SxezRWVpPJ9ieMznKWY9Ooji/bM7xRjw\nf6Pr2Wuqnkuf/v6NVL5WH6T4QDOP4oPt8RTzzkNxDcC5A1mT1ChBnq+M15pIkiRJqw972iVJkqQW\n1/TQHgTBrkEQ/DEIgseDIMiDIPhkL7bZKgiCq4IgeKPc7r+CIKhyExtJkiRppdH00E5x0dodFOPt\nerwgKwiCURRzHz9NMQ7w8xRjAL/YjzVKkiRJTdNSY9qDIHgVODbP8zO7aXM0cAowIc/zN8plX6W4\nQn5K3konJEmSJDVAK/S0V7UjcE1HYC9dAqwPbNiUiiRJkqR+tDLO0z4ReKzTsqdr1j1YuyIIgqOA\nowBGjhy57eabb97vBUqSJGn1Nnfu3OfyPB/XqP2tjKG9kjzPT6e8TXhbW1ve3t7VlLeSJElSYwRB\n0Iibli21Mg6PeYq3b93dYULNOkmSJGmVsjKG9uuBXYIgqL0N+yyK2xQ/1JSKJEmSpH7U9NAeBMFa\nQRC8OwiCd5f1TCufTyvXfzMIgstrNjmH4hbuZwZB8M4gCD4MfBk41ZljJEmStCpqemgH2oBbyp/h\nwNfL308q108CNulonOf5fIqe9fWBduA04DvAqQNXsiRJkjRwmn4hap7nfwO6vJtpnuefrLPsdmDX\n/qtKkiRJah2t0NMuSZIkqRtN72mXJElqdW+++SbPPvssb775JosWLWp2OWqioUOHMn78eEaNGjWg\nxzW0S5IkdWP+/Pk8/fTTjBs3jokTJzJkyBCCoMuRvVqF5XnOG2+8weOPPw4woMHd4TGSJEndeO65\n55gyZQrrrLMOQ4cONbCvxoIgYMSIEUyePJlnnnlmQI9taJckSerGggULGD58eLPLUAsZPnw4Cxcu\nHNBjGtolSZJ6YO+6ajXj/WBolyRJklqcoV2SJElqcc4eI0mStJqZPec2zjrvT5z05ZDxY9ddoX0t\nWZJzwYV/pf3Wu3jl1dd41xbv4OAD9uL6ObexQ9tWjFtvnR73cea5F3JD++1Lnw8dOoSJ49dj9/e2\n8d6ZW9fdZs4td3L19Tfz2BPPsGjxYsattw7bbbMFe+46k2FDhy7TNowS9t1zJw7Yd/cVOtdmMrRL\nkiSpz26+7W6uuGYOB31gTzbeYDIjRw7n+Rfmc9Fl1zJ9o6m9Cu0Aa48cwdGfPhiAl195jSuvmcMv\nz7+I4WuuwXvetfkybX91wZ+59sZb2bHtXey9+44MGzaEeQ88ysVXXM+td9zHv/3rPzN8zTUafq7N\nZGiXJElSnz31zPMAvG+XmQwaVFyg+dL8VyvvZ/CQwWy8weSlzzffdEPib/yAa2+8dZnQPnvObVxz\nw60cfMBe7LnLzKXLN5u+Ie/cfBPS037J+b+/jE8cun9fT6klGdolSZJU1333P8xFl13LQ48+Sb4k\nZ/pGU/jIB/Zk8qTxAMQnn8YLL84H4JgvfROAIz66P2ed9ycAvnf6r5fu6wvhx9hs+ga9Pvaaawxj\n/Nh1l+6/w6VXXs/6E8byvp23W26bDaetz04zt+baG2/hgH13Y8zotaudcAsztEuSJPVBMPdfm13C\nUvm2P274Pm+/6x/86Mzf8M4Z0/nUYR8EisD8nR+ezVePP5J1x4wi/ORHuPKadq5vv40vHfcJAEav\nvRaHfmgfzv3dJXz0wFlsMHV9ACZNGFvp+EuWLOHF+S8zbfLEpctemv8KTz3zPPu8b8cup13cestN\nufr6m5n3wCNst82WfTn1lmRolyRJ0nLO/8NlbLrxNI751MFLl202fQO+mvyQv151I4ccMItpkycy\nZvRaAMsMbekI6BPHj11meU8WL14CwCuvvsbFV8zmjTfeYr+93rt0/YsvvQzAeuuM7nIf661brHuh\nbLuqMLRLkiRpGU8/+wLPPv8i799zp6VBGmDY0KFsvMFk5j3wSMOP+dL8V/jsf3xr6fMggM987EA2\nqhD6V2WGdkmSpD7ojyEpreKVV18D4JfnX8Qvz79oufXrjhnV8GOuvdYIjv3MR1mS5zz3/Iv84eKr\nOOu8i5iy/ngmji967seUx32+0zj3Ws+/ML/famwmQ7skSZKWsdbI4QAcuN/uzNh0o+XWDx48uOHH\nHDx4MBtMnQTARtPWZ+rkiXzjO2dwwR8v59gjPwrAOqPXZsK4dbn9znl8aL896u7n73fOY9CggE03\nntbwGpvJO6JKkiRpGRPGrcd664zmyaeeY4Opk5b7mbL++G63HzqkCPULFy7qcw0Tx6/Hbu/dljvu\nuZ+HHnli6fK9d9+BJ55+jiuumbPcNg898gSzb/o7M7d55yo1cwzY0y5JkrTauvOeB3h07aeXWTZ8\n+Jps8Y6NOPTD+/Cjn1/AosWL2XbrGaw1cjgvv/IaDzz8OOuOGcVeu23f5X7Hj1uXQYMGcd2cvzNi\nxJoMHTKECePWZc2KNzzaZ48dufaGW7josmv57GcOAeC927+b+x9+nN/88TIee/IZttlqM4YNHcI/\nHniUy666kfUnjuOQA2dV/2O0OEO7JEnSauq831+63LL1J4zlv/79KLaaMZ3omI/zl8tnc/Zv/syC\nhQsZtfZabLzB+rRtPaPb/a41cgSHfmhvLr3yBk790dksWZJXnqcdYNTaI9lj5+24+IrZPPL4U0un\nfzzikH9i8+kbcvX1N/PTs3/P4sVLGLfeGPbeYwf22nV7hg0bWuk4K4Mgz/Nm1zBg2tra8vb29maX\nIUmSViJ33303M2Z0H1K1+unpfREEwdw8z9sadTzHtEuSJEktztAuSZIktThDuyRJktTiDO2SJElS\nizO0S5IkSS3O0C5JkiS1OEO7JEmS1OIM7ZIkSVKLM7RLkiRJLc7QLkmSJLW4Ic0uQJIkSQNr9pzb\nOOu8Py19PnjwINYZM4q2rbfgn2btzNChQ5Zr+434GMauO6bScc4890LumfcQ3zrhuG7b3fuPh7nv\n/of5p1m7MGhQ0ON+45NP44UX5y99PnzNNdhg6iT233sXpm80dbn2CxYu5Iqr5zDn1rt45rkXGDx4\nMFMmjWfXHd/DzPdsuVwt381+xeePOowZ79iol2fa/wztkiRJq6l/OfxDrDNmFG++tYBbb7+Xi6+Y\nzZtvvcWhH9pnaZutZmzCl477BKNHrdVvddx3/8NcdNm17LfXzkDPoR1gi802Zv+9dyHPc5559gUu\nuuxafnDGeXz1+COX+XDxxhtv8v9O/zVPPfM8e+06k003nsbCRYu49fZ7+fmv/8C8Bx7mYwft109n\n1jiGdkmSpNXU1MkTGD92XQC2eMdGPPPcC8y+6TYOOWDvpT3ea681krXXGtnMMutaa+RwNt5gMgCb\nbDiFcWPXIT3tl7Tfehfvf99OS9ud94fLePyJZ4g+ezgbTlt/6fKtZkxn/Unj+M0f/srGG0xhx+3e\nNeDnUIWhXZIkSQBMmzyRe+Y9xKuvvc6otYugXm94zIIFC7ngwr8y9+/3sGjRIjZ/x0bsvfsOfPsH\nZ3HER/dnp04B+JHHn+L831/Kw489xZjRazNr1+3Zdaf3AHDhJVdz0WXXAvDZ//jW0m2yNK5W+5SJ\nALzw4stLl700/xVuuvkOdtlhm2UCe4f37bwd195wK5dceb2hXZIkaVUUHHJus0tYKj//0Ibs5/kX\n5zN8zTVYa+TwbtudfcGfufnv97D/3rswbeok7p33ED/71R/qtn3zzbf42a/+wPt22Y79Zu3C9XP+\nzjn/dzETxq/LZtM3ZOft381L81/hupv+TvTZwxk0qG/zpDz/QjHGfdx66yxddt/9j7BkSc67tnxH\n3W2CIOBdW2zKJVdez/yXX+3XIUArytAuSZK0mlqyJGfx4iW8+dZb3HrHfdxy+z0c/MFZ3Qbnp555\nnjm33MmB++3BPnvsCBRDaxYsXMiV17Yv1/7NtxZw2If3YbPpGwKw6cZTueveB5lzy11sNn1D1hkz\nijGj1wZgo2mTGTy4d6E9z2Hx4iXFmPbnXuDX/3cx48euy04z3+4xf/Glotd9vXVGd7mfjnUvvPSy\noV2SJEmt58T/+fEyz3fb6T3ssXNbt9s89MgT5Dls+64Zyyx/z1ab1w3tw4YOXRrYAYYOGcL4cevy\nwksvL9e2ijm33MmcW+5c+nzkiOH8+7FHMHJE998SrKwM7ZIkSX3QqCEpzRR+8iOsM3oUr7z6On+9\n+kaumn0zG02bzA5tW3W5zfyXXwVg7bVGLLN87bXrX6w6YsSayy0bMngwCxcuWoHKYcvNN+GD++zK\n4sWLefDRJ/j9n//Gj3/xW+J/+/TSKSvHjCl68J9/cT4Tx69Xdz/Pl1NHrjtm1ArV09+8uZIkSdJq\nav2J49hg6iTeOWMTPvuZQ5gwbl1++6fLeeutBV1u0zGE5JVXX19m+SuvvNavtXY2csSabDB1Ehtv\nOIU9d5nJYR9+P08+/dwyvf3v2GQDgiDgtjvvq7uPPM+57a55TBy/XksPjQFDuyRJkiiGrXx4//fx\nyquvc9Xsm7tst+G0SQQBzL3t7mWWd35e9dgACxcu7PM+dmzbimmTJ3LZ325gwYJiP+uMXpuZ22zJ\ndTf+nYceeWK5ba64dg5PPv0ce+++Q5+PO1AcHiNJkiQAtt7yHWwwdRJ/vfpGdt95W4YNHbpcm4nj\nx7LdNlty4cVXk+c506ZM4t5/PMRtd/0DgEFB726OtMw+J4wF4LKrbuSdm2/CoEGD2GDqpEr7CIKA\nD+yzK6f97Hyumn0zs3bfHoCPfmhvnnz6Ob7743OYtdv2bLrxVBYuXMwtt9/D7Dl/570zt2anmVtX\nrnmgGdolSZK01AHv343//cm5XH39Ley168y6bT5+0H6sucYwLr3yBhYvXsxm0zfksA/tw2k/O581\n11yj8jHftcV0dtvpPVw9+2b+/NdryfPq87QDbLXFdDbeYDKXXXUDu733PQwbOpQRw9ck+uzhXH7N\nTcy55S4uueJ6Bg0exJRJ4/nkoR9k+23fWfk4zRDked7sGgZMW1tb3t6+/FXNkiRJXbn77ruZMWNG\nzw1Xc5f+7QZ+d9EVnBx/lnW7mWJxVdHT+yIIgrl5nnc/FU8F9rRLkiSpktvumscTTz3L1PUnEAQB\n/3jwUS77241su/WM1SKwN4OhXZIkSZWsucYw/n7HfVxyxfW8tWAhY0avzR47t/GBfXZtdmmrLEO7\nJEmSKnnHJhvwH5/7ZLPLWK045aMkSZLU4gztkiRJPVidJu5Qz5rxfjC0S5IkdWPYsGG88cYbzS5D\nLeSNN95gaJ057PuToV2SJKkbY8eO5bHHHuOFF15g4cKF9rqvxvI85/XXX+fxxx9n/PjxA3psL0SV\nJEnqxujRo1ljjTV49tlnef7551m0aFGzS1ITDR06lAkTJjBq1KgBPa6hXZIkqQdrrrkmU6dObXYZ\nWo05PEaSJElqcYZ2SZIkqcUZ2iVJkqQWZ2iXJEmSWpyhXZIkSWpxhnZJkiSpxRnaJUmSpBZnaJck\nSZJanKFdkiRJanGGdkmSJKnFGdolSZKkFmdolyRJklqcoV2SJElqcYZ2SZIkqcUZ2iVJkqQWZ2iX\nJEmSWpyhXZIkSWpxhnZJkiSpxRnaJUmSpBZnaJckSZJanKFdkiRJanGGdkmSJKnFGdolSZKkFmdo\nlyRJklqcoV2SJElqcYZ2SZIkqcUZ2iVJkqQWZ2iXJEmSWpyhXZIkSWpxhnZJkiSpxRnaJUmSpBZn\naJckSZJanKFdkiRJanGGdkmSJKnFtURoD4LgmCAIHgyC4M0gCOYGQbBLD+3/OQiCW4MgeD0IgqeC\nIDg7CIKJA1WvJEmSNJCaHtqDIPgo8D0gAbYBZgN/CYJgWhft3wv8EvgFsCVwILAF8KsBKViSJEka\nYE0P7cAXgTPzPP9Jnud353l+HPAkcHQX7XcEHsvz/Lt5nj+Y5/kNwPeB7QeoXkmSJGlANTW0B0Ew\nDNgWuLS8XfxiAAAgAElEQVTTqkuBnbrY7DpgUhAEHwgKY4FDgT93cYyjgiBoD4Kg/dlnn21U6ZIk\nSdKAaXZP+1hgMPB0p+VPA3XHqOd5fj1FSP8VsAB4FgiAT3TR/vQ8z9vyPG8bN25co+qWJEmSBkyz\nQ3tlQRBsQTEc5r8peunfTxHwf9zMuiRJkqT+MqTJx38OWAxM6LR8AvBUF9t8Bbgpz/Nvl89vC4Lg\nNeCaIAjiPM8f659SJUmSpOZoak97nucLgLnArE6rZlHMIlPPCIqgX6vj+Ur3zYEkSZLUk2b3tAOc\nCvwyCIKbKC4yDYH1gQwgCIKzAPI8P6JsfyHwkyAIjgYuASYB/w+4Oc/zRwa4dkmSJKnfNT2053l+\nXhAE6wFfpQjgdwD75Xn+cNlkWqf2ZwZBsDZwLPAdYD5wBfAfA1e1JEmSNHCCPM+bXcOAaWtry9vb\n25tdhiRJklZxQRDMzfO8rVH7cwy4JEmS1OIM7ZIkSVKLM7RLkiRJLc7QLkmSJLU4Q7skSZLU4gzt\nkiRJUosztEuSJEktztAuSZIktThDuyRJktTiDO2SJElSizO0S5IkSS3O0C5JkiS1OEO7JEmS1OIM\n7ZIkSVKLM7RLkiRJLc7QLkmSJLU4Q7skSZLU4oZUaRxGySbAccBMYB1gcJ1meZbGmzWgNkmSJElU\nCO1hlMwELgdGAkuAZ4FF/VSXJEmSpFKVnvZTgBHAscAZWRov6J+SJEmSJNWqEtq3Ay7I0viH/VWM\nJEmSpOVVuRB1EfBwfxUiSZIkqb4qof16YOv+KkSSJElSfVVCewzsEkbJYf1VjCRJkqTlVRnTvi9w\nGXB2GCVHAnOBl+q0y7M0/mYjipMkSZJULbR/o+b3PcqfenLA0C5JkiQ1SJXQPqvfqpAkSZLUpV6H\n9iyNL+/PQiRJkiTVV+VCVEmSJElNUGV4DABhlEwGDge2AcYA84GbgbOzNH6sseVJkiRJqtTTHkbJ\np4F5wMnAwRTj3A8CEmBeOauMJEmSpAbqdWgPo2QP4CcUd0Y9Bdgb2Kp8/BawEMjKdpIkSZIapMrw\nmC8BrwLbZWl8X83yO4G/hlHyc6Ad+HfgysaVKEmSJK3eqgyPmQmc3ymwL5Wl8TzgN8D2jShMkiRJ\nUqFKaB8BPNtDm2fKdpIkSZIapEpof5Su74LaYbeynSRJkqQGqTKm/XdAFEbJ94H/zNL45Y4VYZSs\nBZwE7ACkjS1RkiRJWr1VCe0J8EHgGODjYZTcAjwJTOTtOdvnle0kSZIkNUivh8dkaTwf2Ak4E1gD\n2B04jGLIzHDg58COZTtJkiRJDRLkeV55ozBKhgFbAKMp7oh6d5bGbzW4toZra2vL29vbm12GJEmS\nVnFBEMzN87ytUfurMjxmqSyNFwC3NqoISZIkSV2rMnuMJEmSpCbosqc9jJJLgRz4dJbGj5fPeyPP\n0nifhlQnSZIkqdvhMXtRhPaRNc97o/ogeUmSJEld6i60DwXI0nhx7XNJkiRJA6tPs8esrJw9RpIk\nSQOh0bPH9PpC1DBKTg+jZP8e2uwXRsnpK16WJEmSpA5VZo85EnhPD222AT7T93IkSZIkddboKR+H\nAYt7bCVJkiSp16qG9i4HwIdRMhTYBXh6hSqSJEmStIxu74gaRsl9nRZ9PoySw+s0HQyMB0YAjmmX\nJEmSGqjb0E4Rwjt613OKaR+H12m3GLgPuBz4esOqkyRJktR9aM/SeErH72GULAG+k6XxSf1elSRJ\nkqSleupprzULeKC/CpEkSZJUX69De5bGl9c+D6NkBDAamJ+l8euNLkySJElSoUpPO2GUDAa+QDFn\n+6Y1y+cBZwDfzdLYKR8lSZKkBqpyR9ShwMXAKRSB/Ung5vJx03L5pWU7SZIkSQ1Spaf9C8CewF+A\n47M0vqdjRRglmwHfAfYt2/1PI4uUJEmSVmdVbq70MeAu4AO1gR0gS+N7gQOAu4GPN648SZIkSVVC\n+6bARVkaL6m3shzLfhEwvRGFSZIkSSpUCe0LgZE9tBlRtpMkSZLUIFVC+23AQWGUrFdvZRgl6wIH\nle0kSZIkNUiVC1FPA84Bbgqj5CTgSoqZYyYCuwMnAOOBLza4RkmSJGm11uue9iyNzwVSYCPgZ8CD\nwJvAQ8CZFGPZv5ul8a8bXqUkSZK0GqsyPIYsjb8E7AqcBdwOPFI+ngXslqVx1PAKJUmSpNVckOd5\ns2sYMG1tbXl7e3uzy5AkSdIqLgiCuXmetzVqf5V62iVJkiQNvCoXoi4VRskkYAowtN76LI1nr0hR\nkiRJkt5WKbSHUfIF4EsUs8R0Z3CfK5IkSZK0jF6H9jBK/gs4EXgR+BXwOLCof8qSJEmS1KFKT/uR\nFNM8tmVp/GI/1SNJkiSpkyoXoo4F/mBglyRJkgZWldB+PzCmvwqRJEmSVF+V0P4jYP8wSnq6CFWS\nJElSA1W6uVIYJf8L7EtxQerNwPx67bI0fqIRxTWaN1eSJEnSQGj0zZWqztN+I/Bx4Kxu2uR92K8k\nSZKkLlSZ8vFTwBnAYuBa4Amc8lGSJEnqd1V6xL8EPAvsnKXxP/qpHkmSJEmdVLkQdUPgNwZ2SZIk\naWBVCe1PAEP7qxBJkiRJ9VUJ7b8E3h9Gycj+KkaSJEnS8qqE9pOBW4DLwijZOYySEf1UkyRJkqQa\nVS5Efa1mm6sAwihZXKddnqXxGitamCRJkqRCldB+E8Uc7JIkSZIGUK9De5bGO/dnIZIkSZLqqzKm\nXZIkSVITtERoD4LgmCAIHgyC4M0gCOYGQbBLD+2HBUFwUrnNW0EQPBIEwecGql5JkiRpIFUZ094v\ngiD4KPA94Bjg2vLxL0EQbJHn+SNdbHYuMAU4CpgHTACGD0C5kiRJ0oBremgHvgicmef5T8rnxwVB\n8H7gaOArnRsHQbA3sCewSZ7nz5WLHxqIQiVJkqRmaOrwmCAIhgHbApd2WnUpsFMXmx0IzAG+GATB\nY0EQzAuC4H+DIFirH0uVJEmSmqbZPe1jgcHA052WPw3s1cU2GwM7A28BHwHGAN8H1gcO6tw4CIKj\nKIbRMG3atIYULUmSJA2kZof2vhhEMV/8P+d5Ph8gCIJjgUuCIJiQ5/kyHwDyPD8dOB2gra3NeeYl\nSZK00mn27DHPAYspLiStNQF4qottngQe7wjspbvLR7vSJUmStMqp3NMeRkkAbAqsQzG0ZTlZGs/u\nzb7yPF8QBMFcYBbwm5pVs4DfdrHZdcDBQRCslef5q+Wyd5SPD/fmuJIkSdLKpFJoD6PkK8DxFIG9\nO3XDfBdOBX4ZBMFNFIE8pBifngEEQXAWQJ7nR5TtzwFOAH4eBMGJFGPavwdckOf5MxWOK0mSJK0U\neh3awyg5HjgZeAX4NfAosGhFC8jz/LwgCNYDvgpMAu4A9svzvKPXfFqn9q8GQbAXxcWnc4AXgd8D\nX17RWiRJkqRWVKWn/V+BJ4BtszTuPNvLCsnz/IfAD7tYt3udZfcCezeyBkmSJKlVVbkQdRrwu0YH\ndkmSJEndqxLan6baWHVJkiRJDVAltF8AzAqjZI3+KkaSJEnS8qqE9hOAZ4HzwiiZ2k/1SJIkSeqk\nyoWotwLDgO2BD4RR8jzwUp12eZbGmzWiOEmSJEnVQvsIIKeYQabD8MaWI0mSJKmzXof2LI2n9Gch\nkiRJkuqrMqZdkiRJUhMY2iVJkqQW1+XwmDBK/rn89Y9ZGr9a87xHWRqfs8KVSZIkSQK6H9N+NsWF\npzOA+2qedyco2xjaJUmSpAbpLrQfRRHAnyyf/0v/lyNJkiSpsyDPe+o8X3W0tbXl7e3tzS5DkiRJ\nq7ggCObmed7WqP15IaokSZLU4gztkiRJUosztEuSJEktztAuSZIktThDuyRJktTiDO2SJElSizO0\nS5IkSS3O0C5JkiS1uO7uiEoYJf/cl51maXxO38qRJEmS1Fm3oR04G+jLLVMN7ZIkSVKD9BTaz6Fv\noV2SJElSgwR5vvpk8ra2try9vb3ZZUiSJGkVFwTB3DzP2xq1Py9ElSRJklpcT8NjlhNGyXhg/fLp\nE1kaP9PYkiRJkiTV6lVoD6NkDeBzwFHAxp3WPQD8GPh+lsZvNbxCSZIkaTXX4/CYMEomAdcD3wI2\nobgw9YXyJy+XnQLMDqNkYv+VKkmSJK2eug3tYZQMBv4IvBu4CTgAGJ2l8bgsjccBo8plNwHbAH8M\no8Rx8pIkSVID9TQ85ghgW+CXwKeyNF5SuzJL49eBC8Mo+RPwc+DwcpszG1+qJEmStHrqqVf8UOAp\nIOwc2GtlaZwDRwPPAIc1rjxJkiRJPYX2dwN/ztL4jZ52VLa5qNxGkiRJUoP0FNrHUPS099ZT5TaS\nJEmSGqSn0P4SUGVGmInlNpIkSZIapKfQ/ndg33Ke9m6VbfYFbmtEYZIkSZIKPYX284FJwPd7sa//\npehpP29Fi5IkSZL0tp6mfDwTOBb4TBgl04FvANdkabwQIIySocCuQAzsDtyO0z1KkiRJDRXked5t\ngzBKpgKXAJtT3AF1IcXUjgDjgGFAANwL7JOl8SP9Vu0Kamtry9vb25tdhiRJklZxQRDMzfO8rVH7\n6/HupVkaPwpsB5wEPEkR0qeUP2tQzBjz38B2rRzYJUmSpJVVjz3tnYVRsiHFOHeAp7I0frDRRfUX\ne9olSZI0EBrd097TmPblZGn8EPBQowqQJEmS1L0eh8dUEUbJHmGUzG7kPiVJkqTVXa972sMoGQUs\nytL49TrrtgMS4H0NrE2SJEkSvQjtYZQcCJwCTC+f3wKEWRq3h1EyFvgBcDDFDDK3A1/rv3IlSZKk\n1U+3F6KGUfJe4CqWH0bzAsW87BcCGwD3ACdmaXx+/5TZGF6IKkmSpIEw0FM+fqFscwKwfvlzErAu\ncGX5/N+ArVo9sEuSJEkrq56Gx+wAXJml8ck1y04Mo2Q3ijuhHp2l8en9Vp0kSZKkHnvaxwP1xpPM\nKR9/09hyJEmSJHXWU2gfArxWZ/lrAFkav9jwiiRJkiQto6HztEuSJElqvN7M035EGCU7d1q2MUAY\nJZfWaZ9nabzPClcmSZIkCehdaN+4/KlnrzrLup5DUpIkSVJlPYX2WQNShSRJkqQudRvaszS+fKAK\nkSRJklSfF6JKkiRJLc7QLkmSJLU4Q7skSZLU4gztkiRJUosztEuSJEktztAuSZIktbguQ3sYJeeH\nUXJQzfOdwiiZMjBlSZIkSerQXU/7QcAWNc+vAT7dv+VIkiRJ6qy70D4fWLvmedDPtUiSJEmqo7s7\not4NHBZGyQ3Ak+WyaWGU7NTTTrM0nt2I4iRJkiR1H9pPAn4HnF+z7FPlT08Gr0hRkiRJkt7WZWjP\n0vjiMEq2BGYBk4GvUoxrv2aAapMkSZIEBHme96phGCVLgBOzND6pf0vqP21tbXl7e3uzy5AkSdIq\nLgiCuXmetzVqf90Nj+lsFvBAow4sSZIkqXd6HdqzNL689nkYJSOA0cD8LI1fb3RhkiRJkgpVetoJ\no2Qw8AXgSGDTmuXzgDOA72ZpvLihFUqSJEmrue7maV9GGCVDgYuBUygC+5PAzeXjpuXyS8t2kiRJ\nkhqkSk/7F4A9gb8Ax2dpfE/HijBKNgO+A+xbtvufRhYpSZIkrc563dMOfAy4C/hAbWAHyNL4XuAA\nihsyfbxx5UmSJEmqEto3BS7K0nhJvZXlWPaLgOmNKEySJElSoUpoXwiM7KHNiLKdJEmSpAapEtpv\nAw4Ko2S9eivDKFkXOKhsJ0mSJKlBqlyIehpwDnBTGCUnAVdSzBwzEdgdOAEYD3yxwTVKkiRJq7Ve\n97RnaXwukAIbAT8DHgTeBB4CzqQYy/7dLI1/3fAqJUmSpNVYleExZGn8JWBX4CzgduCR8vEsYLcs\njaOGVyhJkiSt5oI8z5tdw4Bpa2vL29vbm12GJEmSVnFBEMzN87ytUfur1NMuSZIkaeAZ2iVJkqQW\nZ2iXJEmSWpyhXZIkSWpxhnZJkiSpxRnaJUmSpBbXEqE9CIJjgiB4MAiCN4MgmBsEwS693G7nIAgW\nBUFwR3/XKEmSJDVL00N7EAQfBb4HJMA2wGzgL0EQTOthu3Uobup0eb8XKUmSJDXRkCqNwyjZBDgO\nmAmsAwyu0yzP0nizCrv9InBmnuc/KZ8fFwTB+4Gjga90s91PgV8AAXBQheNJkiRJK5Veh/YwSmZS\n9GqPBJYAzwKLVuTgQRAMA7YF0k6rLgV26ma7Y4AJwDeAE1akBkmSJKnVVelpPwUYARwLnJGl8YIG\nHH8sRW/9052WPw3sVW+DIAi2Ar4G7JDn+eIgCLo9QBAERwFHAUyb1u2IG0mSJKklVQnt2wEXZGn8\nw/4qpidBEKwBnAdEeZ4/2Jtt8jw/HTgdoK2tLe/H8iRJkqR+USW0LwIebvDxnwMWUwx1qTUBeKpO\n+0nADODnQRD8vFw2CAiCIFgE7Jfn+aUNrlGSJElqqiqzx1wPbN3Ig+d5vgCYC8zqtGoWxSwynT0O\nbAW8u+YnA/5R/l5vG0mSJGmlViW0x8AuYZQc1uAaTgU+GQTBkUEQzAiC4HvA+hRhnCAIzgqC4CyA\nPM8X5nl+R+0P8AzwVvn81QbXJkmSJDVdleEx+wKXAWeHUXIkRQ/5S3Xa5Vkaf7O3O83z/LwgCNYD\nvkox/OUOimEuHUNxvHpUkiRJq7Uqof0bNb/vUf7UkwO9Du0AeZ7/EKh7gWue57v3sO2JwIlVjidJ\nkiStTKqE9s7jziVJkiQNgF6H9iyNL+/PQiRJkiTVV+VCVEmSJElNUGV4DABhlEwGDge2AcYA84Gb\ngbOzNH6sseVJkiRJqtTTHkbJp4F5wMnAwRTj3A8CEmBeOauMJEmSpAbqdWgPo2QP4CcUd0Y9Bdib\n4kZHewPfAhYCWdlOkiRJUoNUGR7zJeBVYLssje+rWX4n8NcwSn4OtAP/DlzZuBIlSZKk1VuV4TEz\ngfM7BfalsjSeB/wG2L4RhUmSJEkqVAntI4Bne2jzTNlOkiRJUoNUCe2P0vVdUDvsVraTJEmS1CBV\nxrT/DojCKPk+8J9ZGr/csSKMkrWAk4AdgLSxJUqSJEmrtyqhPQE+CBwDfDyMkluAJ4GJvD1n+7yy\nnSRJkqQG6fXwmCyN5wM7AWcCawC7A4dRDJkZDvwc2LFsJ0mSJKlBgjzPK28URskwYAtgNMUdUe/O\n0vitBtfWcG1tbXl7e3uzy5AkSdIqLgiCuXmetzVqf1WGxyyVpfEC4NZGFSFJkiSpa1Vmj5EkSZLU\nBF32tIdRcimQA5/O0vjx8nlv5Fka79OQ6iRJkiR1OzxmL4rQPrLmeW9UHyQvSZIkqUvdhfahAFka\nL659LkmSJGlg9Wn2mJWVs8dIkiRpIDR69pheX4gaRsnpYZTs30Ob/cIoOX3Fy5IkSZLUocrsMUcC\n7+mhzTbAZ/pejiRJkqTOGj3l4zBgcY+tJEmSJPVa1dDe5QD4MEqGArsAT69QRZIkSZKW0e0dUcMo\nua/Tos+HUXJ4naaDgfHACMAx7ZIkSVIDdRvaKUJ4R+96TjHt4/A67RYD9wGXA19vWHWSJEmSug/t\nWRpP6fg9jJIlwHeyND6p36uSJEmStFRPPe21ZgEP9FchkiRJkurrdWjP0vjy/ixEkiRJUn29Du1h\nlMTACcAmWRo/UWf9ZGAe8LUsjb/duBIlSZKk1VuVKR8PAK6rF9gBsjR+HLgW+FAjCpMkSZJa0T2P\nv0xwyLlLfwZCldC+CXBXD23uAqb3vRxJkiSptc34wp8H/JhVQvtI4LUe2rwBrN33ciRJkiR1ViW0\nPwrM7KHNTODJvpcjSZIkqbMqof0SYPcwSj5Sb2UYJQcBewAXN6IwSZIkSYUq87SfAnwMOD+Mkt9S\nhPPHgcnAvsCHgReBbza6SEmSJGl11uue9iyNH6MI548DBwE/Af5cPn4EeAzYN0vjR/uhTkmSJKkl\n5Xne78eoMjyGLI1vpJgd5lDge8AvysdDgU2zNL6p4RVKkiRJLex9J1zS78eoMjwGgCyNFwDnlz+S\nJElSryxavIRFi3PWHDa42aU01N/ue6nfj1E5tEuSJElVPPD0q2xy3J+WPs/PP7SJ1aycKof2MEqG\nAttSXIC6Rr02WRqfs4J1SZIkaRVRG9gBgkPONbhXVCm0h1FyBPBtYGwXTQIgBwztkiRJWuUccepV\nTTlury9EDaNkb+DnwPPAlykC+oXA14Ary+cXAEc1vkxJkiStjA7/5rl1l//kjPrLW90vb2jOfUSr\nzB4TUczDvkOWxt8ul92cpfE3sjTeCzgaOBC4u8E1SpIkaSV19i31lx916cDWsbKrEtq3Bf6YpfHL\n9bbP0vjHwA3AVxtUmyRJkiSqhfaRQO33AW8Ba3dqcxOw/YoWJUmSJOltVUL7U8C4mudPAJt1ajMK\np5GUJEmSGqpKaL+LZUP6dcCeYZTsCBBGyQzgkLKdJEmSpAapEtr/Arw3jJJJ5fP/oZje8dowSp4E\nbqfoaT+5sSVKkiRJq7cqof3HwAbACwBZGt8BzAIuA16lmPZx/yyN/9TlHiRJkiRV1uvx51kaLwAe\n77TsOuD9jS5KkiRJ0tuq3Fzp0jBKTuzHWiRJkiTVUWV4zM7AsP4qRJIkSVJ9VUL7P4Cp/VWIJEmS\npPqqhPafAvuFUTKlv4qRJEmStLwqN0L6LbAncF0YJd8E5lDccCnv3DBL4ycaU54kSZI0sF5/axFr\nDh3MoEFBs0tZqkpof4QioAfAad20yyvuV5IkSaugM844t9kl9MnIwy9Y+vtdp+7LjCmjm1hNoUq4\nPoc6veqSJElSPf9yabMrWHFbfPEv5Ocf2uwyKs3T/vH+LESSJElSfVUuRJUkSZJWaT+8aE6zS6ir\n29AeRskRYZS8a6CKkSRJkprpuF/c3+wS6uqpp/1M4MDaBWGUfCKMkiv6rSJJkiSpSZY0u4Au9GV4\nzIbAbg2uQ5IkSWpJ2Z/bm12CY9olSZKk7hx95j+aXYKhXZIkSWp1hnZJkiRpBV3wt7v6df+9Ce3e\nUEmSJEmrvXMuv73LdT+64tF+PXZvbq50YhglJ3ZeGEbJ4i7a51kaV7nTqiRJktTy/vOCe7tcd9cT\n8/v12L0J10HFfVZtL0mSJLW8h59f1OW6F17p38kiuw3tWRo75l2SJEmi+zHjC/p5QLmhXJIkSX32\n0msLml3CasGx55IkSeqTIYecS+1FjkvO+yhB4Ejp/mBPuyRJkvqk86wkBvb+Y2iXJElSZe888txm\nl7BaMbRLkiSpsjtfbnYFqxdDuyRJkhoiOMTe9/5iaJckSVIl/3mS4XygGdolSZJUSXJHsytY/Rja\n/3979x4nV1kffvzz7OYK4RJugXAVoaBcCgQQKjf9Fe+3AiYRrdKKZAQFKquWhSq17XrpgqRaXcAW\nRJQQQW1RqWAR0QCxWS6CgCACCgGSSEhIyGUvz++PM5udmZ2ZndndmTOz+3m/XvPaOec855xnnrPZ\nfM8z3+c5kiRJUoMzaJckSZIanEG7JEmS1OAM2iVJkjRmDj+7eQep/v3VS9OuQkkG7ZIkSRoz969K\nuwYjd8Ovnkq7CiUZtEuSJEnAM3+KaVehJIN2SZIkjbmrrspPkzn9z1OqSBV6065AGQbtkiRJGnNn\n3Za//O2L5rPfNunUZTwwaJckSVJdXHxC/vLVVzfPoNXu7u5Uz98QQXsI4ewQwpMhhI0hhO4QwvFl\nyp4SQrg1hLAyhPByCGFpCOFd9ayvJEmSqvehD83PW/78kpQqMgKnX/1kqudPPWgPIcwDFgIdwOHA\nXcAtIYS9SuxyInA78PZs+R8D3y8X6EuSJKnxPL427RpU7vcr0s14n5Tq2ROfAK6JMV6VXf54COEt\nwEeBCwsLxxjPK1j1jyGEtwPvAX5R05pKkiRpQkp7kGqqPe0hhCnAHODWgk23An9RxaG2AVaPVb0k\nSZKkRpJ2esxOQCvwQsH6F4BdKzlACOEcYA/gWyW2nxVCWBZCWLZy5crR1FWSJElKRdpB+6iEEE4F\n/hU4Pcb4dLEyMcYrY4xHxhiP3HnnnetbQUmSJGkMpB20rwL6gFkF62cBz5fbMYRwGknv+gdjjDfX\npnqSJEnKNWVu/jSNl78+pYpMMKkG7THGzUA3cHLBppNJZpEpKoQwlyRgPyPGeGPtaihJkqRcPQXL\n5503v2g5ja1GmD3mMuBbIYRfAUuADDAb6AIIIVwLEGP8YHZ5PknA3gbcGUIYyH3fHGN8sc51lyRJ\nkmou9aA9xnhDCGFH4GJgN+Ah4G05OeqF87VnSOp9efY14OfASbWtrSRJklR/qQftADHGrwFfK7Ht\npHLLkiRJ0niX9kBUSZIkScMwaJckSdKovPe1+ctzL1lUvKBGzKBdkiRJo7L4kvwZZL77cEoVqaMZ\nk+t7PoN2SZIkqUqH7rlNXc9n0C5JkiRV6eun71nX8xm0S5IkaVgxRtZv7E27Gg3j0EMPrev5GmLK\nR0mSJDW2v7/kBr70SNq1mLjsaZckSdKwDNjTZdAuSZKkEYmL5w9faBybWsdI2qBdkiRJJfX09hPm\nOu96MbNn1m/eR4N2SZIklfRnH1xccttEH5g69+j8GWQeeaR2OUQG7ZIkSSrpqTJx+dbTJvacJl/4\nm6Pzli/93z/V7FwG7ZIkSaraRM9nL+aWB56r2bEN2iVJklSVS49JuwaNaeWavpod26BdkiRJVfnY\nue+tqvxRu9WoIg2mp4bHNmiXJElSVTb39ldV/lcLTaUZrYk9ekCSJElVMZc9Hfa0S5IkSQ3OoF2S\nJElqcAbtkiRJUoMzaJckSVJRB7x/UdpVqJulS5fmLe+1Q0oVKcGgXZIkSUP09ffzWC3nMGwwx1z6\nZN7y012NNeDWoF2SJElDTJq/OO0qpG7bKWnXYJBBuyRJkioy0aZ7nNdAT4UyaJckSVJFnlyxLu0q\n1NUV556QdhW2MGiXJElSRbadPjntKtRVCCHtKmzhE1ElSZI0rImWGtNo7GmXJEmSGpxBuyRJktTg\nDJRFuLwAABxbSURBVNolSZI0Ia15ZTPrNjbHZPTmtEuSpIb3ct9Gtm6ZQkuwv1FjZ/szvpd2FSpm\n0C5Jkhretveft+X97X/2Cd6wzQEp1kaqP29XJUlSU3njY5elXYVxL8xdVPU+u4+jruD3HbVj2lUY\nwqBdkiQ1tNC9IO0qTHiVTPf4zHfGz5SQ3/nkyWlXYQiDdkmSJKnBGbRLkiSppvpif9pVGGL3M6tP\nAUqTQbskSWo6a/s2pF0FVeqEJ5h070cbLs1p+dq0a1Adg3ZJktR0trv//LSroEptvXnL21kNFrg3\nE4N2SZLUlBqt53a82GYEM8eUNWkwNWbF2B55QjFolyRJDcvAvP7WFSxXMnNMWa1xdPsLMGiXJElS\nLbU23iDUclZffUraVShqHE2DL0mSJprQvYA454q0q6FypvWkXYOK9C2aR0tLSLsaJdnTLkmSmtpU\nU2gaW85A1EbWyAE7GLRLkqQm1xwh4QS2dXP0tDc6g3ZJktSQCgeh7g+mwjSbSX0wuS/tWowLBu2S\nJKkpPGbA3ny23gyNnXXSNAzaJUlSU7G3vYlsNUzy0g7rCd0L6I3p9sY3w32FQbskSZJqo8JBqJPv\nPbvGFck3+8P5D5C689w9SpZtrXVlKmTQLkmSmp4PYRoboeBpqB2Hj/KAww1Cjen0cT/3cv7ycccd\nV7LsRe/cv8a1qYxBuyRJajqmyNTHhReO8mmow83R3t/4iSmXfOCItKsAGLRLkiRpjMTFBUH+hsnl\nd8gJ2tf3bapBjUYvhPI3FvV6UqlBuyRJkmpj79Xlt+ekx2yKvTWuzNjJDaC3nl7/c0qSJDUEc9Sb\n3E7r4IAVcODK8uVyetp3fOATNa7UKBSk+fRPW7Xl/e7b1SdqN2iXJEkNr5IcdgP9xrD66lPgw/8H\n7/kNtMTyhYfZ3AhijLDj+vyV8x7b8vagvbarSz0M2iVJ0rgRYxNEgePczEc/nrd8OgfkF9h2zeD7\nvsYPRXtiH+xcELTPHMy//9w7ds3b9Oijj9akHo3fUpIkSUUU631vuTeTQk1UzrfnFKS9HPvE4Pu+\nxp89Zpf7zodtN+avnDr49sADD8zbdNntf6pJPQzaJUlS0zok7QqoeoesYUteTF8r9Kdam2GtoQem\nVj5Idsmjq4YvNAIG7ZIkqWn92vnam08rMLlvcLmnUZ45WsbUvqGrSoyhePjgX9WkCgbtkiRpXAnd\nC+iLDd59O9FNzrk+TRG0D+1p35z9eddD3dCaE9S/5qWaDIo2aJckSePOpHs/mnYVVE5eT3sThKNT\nhva0D3j9pivze+L7a/N5mqCVJEmSNK40W3rMrJcH3++0bsvbU7r/LXmTO7Vlf20G19bryauSJEkV\nqTa1IM65oug+M7sXsLrGOe9h7qIt73cEVi2eX9PzjRtNlx7TB/Pvgwd3haP+uGX19/lN8qYl5/PU\nKGi3p12SJDW0V1dQptj0jy+NfVXKqs1Ef+NUs/W0A+z9ErzjUZi1fui2OvS0G7RLkqSG9rsKe8sr\neWqqSsv91gDg5Nk1PFmz5bQPx6BdkiSpeRQGvs3s1strmOqzaqvB983S015Oq0G7JEnSiNVi6r1h\nzzmOAvexMrlwRV9OCJoTtL+2+4K61CfXDlOHL5OraPHcnvY+Z4+RJEkqa07aFVBRmwtTlzblzIWy\naTBof4R11Np7On6ct/yDs3avav+NxdKwTI+RJEmq3LIGyWs/xd728npyg/b6Tmb4X/evzVs+/vjj\nR3/QOswe45SPkiRJI1AuDeb7wKq1m5gxbRLTpoyDnO0xkDtQOJDTdpvHQfs4T7skSVJz2vnM7295\nvyfwB+dwL67OPe01YXqMJEnS6KQxGLXQH4cvMi5sU9DWX+fw4XcaD0F73uwxDkSVJEkalvO1V68w\n1Wf6CI9TOIw0Mycz/E5jmB6zqaePh/5Q+8dqHU3B4NW82WPsaZckSWpYcZj0l2aaCvKVeqbybB67\nnvZp7/8uh7T9D2HuIsLcRfT09g+/0wgsnfOZ/BUORJUkSdK4NoKe9twboGe73s3sHaYXvSmaPKlO\n/dPmtEuSpImkMP983xodd7iyAy/VQe/owtHdM//Fp795S9Ftdft2w6BdkiRNZE+MMD/95cMWjmi/\nwkC9tcrAfbgUmdNPX8SGzb1VHXPNK5u5/6nVxBiHL9yMekaf0/6lH60puS3MXURff23SZLZwykdJ\nkqTqzWidNmRdf+ynJZTuryzWs14q1BtpD+71vXD9B24Ehg/wB2x/xvfylivdr2lU0dP+8DNrOOgT\nxXvVy5k0fzFrrjmVbbeaXPW+FanD7DEG7ZIkaUJovfejNZtZJjeQLgyqSwX4y554kSNfvUPV5wpz\nF3FwgAdvGCfBe1/lQe5IAvYBNQvYIb+nvdf0GEmSpIpVE6Cnkb9+1IW38oG/Lt1jPzADSjEPxcHt\nDz9TOjWkKfS2QB0yf3b/cA3z21duNfh+DGfDyWXQLkmSJpxqBpuONqAvl87y7U3w5IrC2c2rM5re\nZ0hnKsqe6+fm1gA2Dh/ojraey18e1e5DrDi0c3DhmZmD7yv4LCNh0C5JkiaMYoF6JUF5b+wbLD+C\n4LFc4L7vx35Y9fFq6Z8Orf05JrUWhKDrp5Qsu6mnjw2bqhu8OxK5N3JL1z85bPmdJ29DnHPF0G90\nNhi0S5IkVeV1Y3ScyfeeDYyut7eWA0jPP39k9Sr2eS6+OIVc+VcGg/aDutvyNk17/3fZ6q9vrPhQ\nr95m9G19zKNfGPnO66aO6tylGLRLkqRx654RDDwt2nsKTC8RsK+79rSqz1Hy3NlpHau9OVi4fHCf\ndX0bWbLud8PuE7oXQGtf3rp69LIXtXYw0H2Y0eWx/O4/koC9b9G8UR1nxFNsrp4+qvOW4uwxkiRJ\nWTPLbNtYYv3W0yoPp06fAt/ZPHR9bpC+R5H94uL5eWX6b5hHy7wbhh7nb6+Cc5ZtWf4U2/PFOV8c\nPE6MtNybGdxh202wenAQ5UAve4yREJJZUB7f+AL7Td1ly3JNVBnovu9o+PYF8+jti0w5ffGW9bk9\n7C0tldf3Td2dQ9a13JsZcvNWOoknx5qh042OBYN2SZI04VU200w/hUkKW1d5nm9fN5+zHl7BSZfc\nXrLMMyXWV5TysX1fMhNLNl79Ei/xpcKc/YHtz8/ICdgj8Dyre9ezwwOfKHropw/5PD2xj1dP3XnI\nthd713PFA13D16+UF7cqurrwG4etgPU57TB5UqgqFWbWGfnH+6e5swG4jceLn7+g7Q5l9wrO4jzt\nkiRJVYtzrig62HS4QP3NwE8GFnpaIIS8qQn7b5g3ot7nE1+7y5Ce85Eoeoxntof7ZsMRy3MqCizd\nG1ZPg5kbkl7th3aFmBNc7voyfOjRkgE7wN4PXpict6DdxmS6zAp7p9dXmate2EYrXsnffvFpJ1R1\nvHewV1Xlx5I57ZKkpveHzS9WVT7GyI2ru+mPNX60uZra/+QGp0/PhDgYoL8NRp0uMhYDU9ddexov\nX3sqTMmZXWXJq/LnPV+2J9y5Lzw4G+58dfIzFoSAu62t+Jyhe0GSPlPhlJkVWZs/eHPdxp6xOe4Y\n+/ifvze1czdET3sI4Wzgk8BuwG+A82OMvyhT/kTgMuAgYDnwpRjjKL6TkSQ1k57+Xqbcd86Q9ZU+\nTCcvp7fKfcebvtjPpHs/WnTbhsO/yrSW6p4iubLnZVb3vcKLves5Zsa+Y1HFxvBU/pNLfzRGM8Gs\nueZUpk9pzcvLzvXcle9m66mlw7Ut+fQL7oYrj4FNk5OZWL7+Ojh7KbywNSzZZ/iK7FHdA5qK/Rsq\n1H9EFaHZK1OSG43eFnhgN7a5dDH0tlZVp3rYYVLxhKjdtmvluTWDg3qPXfIX3M2VY3ru1IP2EMI8\nYCFwNvDL7M9bQgivjTH+oUj5VwE/Bv4T+ABwHPC1EMLKGONN9au5JKlUL9t9B17MjNapTA+T2X1q\nuaF9pY+z8fCvMrVIwFiuZ280vX6he8GEDNxLBewA0+/7GFD+hmbIwMZS5UqkqOQev5ZPJe0/oqui\nepb05PC/xyOx7VbJ7/hAr/tjy9dywPk/BpIHEA3MZz7QNnHOFfTHfloLr9tWwD6r4be7JMsvbwVf\nfMPQE07pLfLEzgj7rhpSdP3hX+GFnrXs+9BFI/psVX0TEVvg+sNg+bbQVyRYDxEW3MGKnrexy+Rt\nR1SfUor93q077N+4de3DLPv943Twv3yME/nKnNNLHmP5Ve/NS8O5+5djP+1jGPF0NmNVgRCWAr+O\nMX4kZ93jwI0xxguLlP8icEqMcf+cdd8ADooxHlv2XLP2jpw+5JBqJjUcuK56SvfvTkn+flWnJcKk\nEuklESAkubS9LXlpBUOOUeo4vS3JK1eIMLVvaNmxsrkV+ifQL0JrhMkVtGdfS5LTXaglJsdo6S//\n72egB3VSiXKbW5PfkSl9yTUmW/7pHYoUHqXJvcm5qunF3WkdrJqRvG/ph4//AqY1YGrV/bPhJweU\nLfLKdadx269f4Oj9duD3L6xn9frNvPHgXZg+ZRIv9b7C6r5XeNXUndjY35P3Lcul3ZfSxmMVV6WS\nG+ANm3vZ6gMVzr/+mhfgXQ9XfP489+wJP99v6PpDl8Nbf1t0l5HcwA8ZX/Dd93XHGI+s+kAlpNrT\nHkKYAswBCufZuRX4ixK7HZvdnusnwIdCCJNjjKWToHpa4dntR1hbSZLU9HpGEPoMBOwA+77YmAE7\nwD7lx3YM9Oa/68hkBpRdt8+fZnH7SVux/aRkFpfCtKgL5lzAD7sv5A5Kn6PadKrpU0pcixmbCh5Q\nFOGw5cXLVuLAlfCLfaE/58azpR/mFJ+np1G/cUu1pz2EMBt4FjgxxnhnzvrPAO+PMQ65XQwhPAZc\nF2P8XM66E4CfA7NjjM8VlD8LOCu7eDDw0Jh/EFVqJ2Do92+qF9s/PbZ9umz/dNn+6bHt03VAjHGb\nsTpY6jnttRZjvBKSkQAhhGVj+TWFqmP7p8v2T49tny7bP122f3ps+3SFEJYNX6pyaU/5uAroA2YV\nrJ8FPF9in+dLlO/Fu0lJkiSNQ6kG7THGzUA3cHLBppOBu0rsdneJ8svK5rNLkiRJTSrtnnZI5ls/\nI4RwZgjhNSGEhcBsoAsghHBtCOHanPJdwO4hhMuz5c8EzmDoYNZixnbCTFXL9k+X7Z8e2z5dtn+6\nbP/02PbpGtP2T33KR9jycKVPkTxc6SHg7wYGpoYQ7gCIMZ6UU/5E4MsMPlzpiz5cSZIkSeNVQwTt\nkiRJkkprhPQYSZIkSWVMmKA9hHB2COHJEMLGEEJ3COH4tOvU7EIIJ4QQ/juE8GwIIYYQzijYHkII\nl4QQlocQNoQQ7gghHFRQZmYI4VshhDXZ17dCCD4BaxghhAtDCP8XQlgbQlgZQrg5hHBwQRnbv0ZC\nCOeEEH6dbf+1IYS7Qwhvz9lu29dJ9t9CDCF8NWed7V8j2XaNBa/nc7bb9jUWQtgthPDN7N/+jSGE\nh7NpwwPbvQY1EkJ4qsjvfwwh/CinTNl4M4QwNYTwlRDCqhDC+pDEUXtUcv4JEbSHEOYBC4EO4HCS\nmWluCSHslWrFmt8MkjEI5wEbimz/FHAB8HHgKGAFcFsIIfdBA98BjgDekn0dAXyrhnUeL04Cvkby\n5OA3kkx5+tMQQu4zv23/2nkG+DRJex0J3A78IIRwaHa7bV8HIYRjSB6e9+uCTbZ/bf2WZAzawOuQ\nnG22fQ1lA+slQADeDryGpK1X5BTzGtTOUeT/7h8BRGAxVBxvXg6cCrwPOB7YFvhhCKF12LPHGMf9\nC1gKXFWw7nHg82nXbby8gHXAGTnLAXgOuChn3XTgZWBBdvk12V/21+eUOS677oC0P1MzvUhuoPqA\nd9r+qV2DF4EFtn3d2ns74AngDcAdwFez623/2rb7JcBDJbbZ9rVv/w5gSZntXoP6Xo+LgJeA6dnl\nsvFm9u/WZuD9Odv3BPqBNw93vnHf0x5CmALMAW4t2HQrSS+lauNVwK7ktHuMcQNwJ4PtfixJsJ87\nJ/8SYD1em2ptQ/LN2erssu1fJyGE1hDCfJIbp7uw7evlSuDGGOPPCtbb/rW3bzb14skQwqIQwr7Z\n9bZ97b0HWBpCuCGEsCKEcH8I4WMhhJDd7jWok2ybfxi4Lsa4ocJ4cw4wmfzr80fgESpo+3EftAM7\nAa3ACwXrXyD5xVZtDLRtuXbfFVgZs7eaANn3K/DaVGshcD/Jw8fA9q+5EMIhIYR1wCaS50f8VYzx\nQWz7mgshfATYD7i4yGbbv7aWkjwb5S3AR0ja664Qwo7Y9vWwL3A28HvgzSR/+78AnJPd7jWon5NJ\nbpKuyi5XEm/uSvKt+KoyZUqaNNKaSmoMIYTLSL7aPC7G2Jd2fSaQ3wKHkXzdeRrwzRDCSanWaAII\nIRxAkiJwXPQp2HUXY7wldzmEcA9JAPkh4J5UKjWxtJA8Af7C7PJ9IYT9SYL2r5beTTXwEeD/YowP\n1OuEE6GnfRXJXc2sgvWzgOeHFtcYGWjbcu3+PLBzztd6A1837YLXpiIhhC+TDGZ5Y4zx9zmbbP8a\nizFujjH+LsbYnf0P9H7g77Dta+1Ykh6t34QQekMIvcCJwNnZ93/KlrP96yDGuA74DbA//u7Xw3PA\nwwXrHgEGBjp6DeoghLAL8G4Ge9mhsnjzeZLe+J3KlClp3AftMcbNQDfJ1xi5TiY/n0tj60mSX8At\n7R5CmEYyUnqg3e8myQM+Nme/Y4Gt8doMK4SwkMGA/dGCzbZ//bUAU7Hta+0HJLOVHJbzWgYsyr5/\nDNu/brJteyBJMOnvfu0tAQ4oWPdnwNPZ916D+jiDJDXy+oEVFcab3UAP+ddnD5LBwcO3fdojb+s0\nunceyWjdM7MNs5BkEMbeadetmV8k/+gH/tN8BfhM9v1e2e2fBtYApwAHk/ynuhzYJucYtwAPkvzB\nODb7/ua0P1ujv4B/B9aSTPe4a85rRk4Z27927f8Fkv8E9yEJID9PMvr/rbZ9KtfjDrKzx9j+NW/r\nTpJvNl4FvA74YfZv0d62fV3a/yiSoO8iknEd78229zk5ZbwGtb0GgaRz4Koi24aNN4Gvk0wb/Jck\n00L+jOSb2tZhz532h69jI58NPEVyZ9QNnJB2nZr9RTJXeCzyuia7PZBMD/YcsBH4OXBwwTFmAtdl\n/+ivzb7fPu3P1uivEu0egUtyytj+tWv/a0h6tjaRDN76KTnTddn2db8ed5AftNv+tWvrgQBwM/As\ncBPwWtu+rtfg7cAD2fZ9DDgXCF6DurX/G7L/3x5dYnvZeJPkG9mvkKTyvQLcDOxZyblD9gCSJEmS\nGtS4z2mXJEmSmp1BuyRJktTgDNolSZKkBmfQLkmSJDU4g3ZJkiSpwRm0S5IkSQ1uUtoVkCRprGTa\nOs4kebT4X3d1tl+Xdn0kaawYtEua8DJtHcM9sOJvujrbr6lHXSRJKsagXZIG/WOJ9ffXtRaSJBUw\naJekrK7O9kvSroMkScUYtEtSFTJtHdcB7wf2Bv4KOBPYD1jS1dn+l5m2jqnAWcDbgNcCuwLrgW6g\ns6uz/SdFjvkMsBE4Avgn4FRgR+BR4LNdne3/nWnrmARcCHwQ2BN4Bri0q7P96yXq+VbgXOBoYEa2\n/E3AP3d1tq+t8LP+M3ARcDywO9AGHARsAH4CXNDV2f5csc/S1dm+X7njdXW2/zK7bhLQA/wv8AHg\nC8Bbs3W+D/h0V2f7kkxbxwySb0LeC+wC/C7bNjeVqf+7SNrsUGAT8FPgwq7O9ieKlN0aOA+YR3I9\nI/BrYGFXZ/sNBWX/ErgN+IfsMT8DHAPMBPbs6mx/plSdJGmknD1Gkkbm34FLyAZ2wF3Z9TsDl5ME\nnbcBlwH/DcwBbsm0dZxR4nhTSQLANwM/AK4D9ge+l2nrOIkk4D4L+BnwH8C2wNcybR2nFh4o09bx\nOeDHwFHAzcC/AU8AnwR+mQ2Aq3EucA3w++znfgR4H/DTTFvHlCqPVcoOJG14CHA98D3gdcCtmbaO\nQ0g+9ztI2vJbwD7AdzNtHUeVON5ckjZ7muT6LCUJ+O/JtHXsn1sw09YxE1gC/AvJDcR/At8EZgGL\nMm0dl5Q4x3HAncAUkmtybXZ/SRpz9rRLUlaJ4OypEoNQDwMO6+psf7pg/Spgr67O9mcLjr09cDfw\nr5m2juu7Ots3Fey3B0lv/PED2zJtHd8BbicJYB8DDu7qbF+T3XY58DDw9yTB6cB5TibpAf4l8I6B\n8tltAzOrfJYkgK/Um4Ejuzrbf5M9TgBuIAmC35Gt32gdDnwN+HhXZ3t/9jy3kwTQPycJjo8r0jaf\nytaj0DuBt3Z1tv/PwIpMW8cFQCfw1exnGvAV4M9Jvjm4LKf8dJKbhM9k2jpu6upsf7DgHG8Gzuzq\nbP+PEX9qSaqQPe2SNOizRV5nlCj7hSIBO12d7RsLA/bs+peAq4GdSHrdizkvN5jv6mz/GfBHkrSL\nT+UG4F2d7Y8D9wCHZoPoAedmf56ZWz67zzeAh0jSe6rx5YGAPXucSBL8Q5J+MxbWkXzG/px11wH9\nJJ//3CJt8wzJzVMxt+YG7FkLgaeAN2XaOnYHyLR17ELyrcE9uQF79hwbSG6KQrZMoWUG7JLqxZ52\nScrq6mwPw5fa4lelNmTTOT5Jkj4xmyT1JdfuRXZbVewmAFhOksN+b5Ftz5KkZuwCvJBddyxJ/vb7\nMm0dxao3Cdgt09axXWFQX8ayIuv+mP05s8JjDOfRrs729bkrujrbezJtHSuB1q7O9j8U2edZkh7y\nYn5euKKrs70309axhCS15vDs/keTdGCFEt+0DFy71xTZVvJ3QJLGmkG7JI3M88VWZto6Xk+Sm95C\nMrjyv4CXSXqMjyBJ2ygM4gFKBdC9QF9XZ/u6EtsAJues24GkZ/izw9R/RplzFnqpzLlbKzzGcMp9\n/mKffWDb5BLbXiixfuC6bZf9uWP25+uyr1KKjQMo+jsgSbVg0C5JI1PqgUz/AEwjZ4aUAZm2jn8g\nCdpraS2wuauzfZcan6eUfkr/37J9Hesxq8T6XbM/1xT8/NeuzvZPVXmO4R7KJUljxpx2SRpb+wEr\nCgP2rBPrcP57gJ0zbR0H1OFcxawmSb8p1gN/ZB3rMaSts9NLvj67eF/251KS4Pv4OtVLkkbEoF2S\nxtZTJEHzQbkrM20dC4D/V4fzDwym/EamrWO3wo2Zto4ZmbaOcmkgo/Urkjz7DxWc90zKp5+MtTdl\n2jreUrDuPJJ89tsGBgtn55lfBByTaeu4sNjNRqatY79MW8feta6wJJVjeowkja0vkwTnd2XaOhaT\npKscTTJA9CaSByfVTFdn+62Zto6LSR7S9HimreMW4EmSnOx9SHqgB+Y8r4WFJA+AujLT1vEmkhle\nDicJ2H8EvL1G5y10M3Bzpq3jJpL55Q8H3gL8CTinoOxHSb4h6QDOyLR1/BJYCexG8oCsI0mmlSw2\nUFiS6sKedkkaQ12d7T8C3k3yNNP5wN8CrwAnAYVTENaqDv+Sc77XA+eTBJ27AV0kT/Cs1bkfAk4m\nmZP+XcBHSD7/McD9tTpvEYtJbpD2IelhPwa4ETgmO13mFtlZdI7PlnsROI2kzU4iyXk/n2ROeElK\nTYjRcTSSJElSI7OnXZIkSWpwBu2SJElSgzNolyRJkhqcQbskSZLU4AzaJUmSpAZn0C5JkiQ1OIN2\nSZIkqcEZtEuSJEkNzqBdkiRJanAG7ZIkSVKD+/9c2wN0DI7qkwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x263bb32bf98>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython import display\n",
    "fig, ax = plt.subplots(figsize=(12,9))\n",
    "plt.xlim([0, 700]);\n",
    "plt.ylim([0, 1]);\n",
    "plt.xlabel('Frame number'); \n",
    "plt.ylabel('Fraction of ROI in motion');\n",
    "plt.title('Fraction of ROIs in motion over time');\n",
    "\n",
    "left_fractions = []\n",
    "right_fractions = []\n",
    "\n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "k = 15\n",
    "\n",
    "running_avg = None \n",
    "for j, frame in enumerate(original):\n",
    "\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    # For all pixels with a difference > thresh, turn pixel to 1, otherwise 0\n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "\n",
    "    left_area = subtracted[270:700,240:440] \n",
    "    right_area = subtracted[270:700,540:740] \n",
    "    \n",
    "    left_fraction = sum(sum(left_area))*1.0/(left_area.shape[0]*left_area.shape[1])\n",
    "    right_fraction = sum(sum(right_area))*1.0/(right_area.shape[0]*right_area.shape[1])\n",
    "    \n",
    "    left_fractions.append(left_fraction)\n",
    "    right_fractions.append(right_fraction)\n",
    "    \n",
    "    plt.plot(range(len(left_fractions)), left_fractions, color=colors[3], label='Left ROI')\n",
    "    plt.plot(range(len(right_fractions)), right_fractions, color=colors[0], label='Right ROI')\n",
    "    if j==0:\n",
    "        plt.legend();\n",
    "    \n",
    "    display.clear_output(wait=True)\n",
    "    display.display(plt.gcf())\n",
    "    plt.savefig('D:\\dev\\kernel images/gree-left-and-right'+str(j).zfill(3)+'.png',dpi=640.0/12)\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "            break\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "left_fractions = []\n",
    "right_fractions = []\n",
    "\n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "k = 15\n",
    "\n",
    "running_avg = None \n",
    "for j, frame in enumerate(original):\n",
    "\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    \n",
    "    # For all pixels with a difference > thresh, turn pixel to 1, otherwise 0\n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "\n",
    "    left_area = subtracted[270:700,240:440] \n",
    "    right_area = subtracted[270:700,540:640] \n",
    "    \n",
    "    left_fraction = sum(sum(left_area))*1.0/(left_area.shape[0]*left_area.shape[1])\n",
    "    right_fraction = sum(sum(right_area))*1.0/(right_area.shape[0]*right_area.shape[1])\n",
    "    \n",
    "    left_fractions.append(left_fraction)\n",
    "    right_fractions.append(right_fraction)\n",
    "    \n",
    "    cv2.rectangle(frame, (240,270), (440,700), (0, 204,102), thickness=2)\n",
    "    cv2.rectangle(frame, (540,270), (740,700), (0, 85,167), thickness=2)\n",
    "    \n",
    "    ax, fig = plt.subplots(figsize=(12,9))\n",
    "    plt.imshow(frame); plt.axis('off');\n",
    "    plt.savefig('D:\\dev\\kernel images/roiframe'+str(j).zfill(3)+'.png',dpi=640.0/12)\n",
    "    plt.close()\n",
    "\n",
    "    if cv2.waitKey(1) & 0xFF == ord('q'): \n",
    "            break\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(figsize=(12,9))\n",
    "plt.xlim([0, 800]);\n",
    "plt.ylim([0, 1]);\n",
    "plt.xlabel('Frame number'); \n",
    "plt.ylabel('Fraction of ROI in motion');\n",
    "plt.title('Fraction of ROIs in motion over time');\n",
    "plt.plot(left_fractions, color=colors[3], label='Left ROI');\n",
    "plt.plot(right_fractions, color=colors[0], label='Right ROI');\n",
    "plt.savefig('D:\\dev\\kernel images/left-and-right.png')\n",
    "plt.legend();\n",
    "plt.close();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "history_length = 40\n",
    "area_thresh = 0.05\n",
    "history = pd.DataFrame(columns=['Detected left','Detected right'])\n",
    "left_fractions = []\n",
    "right_fractions = []\n",
    "running_avg = None \n",
    "thresh = 35 \n",
    "alpha = 0.2\n",
    "k = 15\n",
    "for j, frame in enumerate(original):\n",
    "\n",
    "    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    smooth_frame = cv2.GaussianBlur(gray_frame, (k, k), 0)\n",
    "    \n",
    "    if running_avg is None:\n",
    "        running_avg = np.float32(smooth_frame) \n",
    "    \n",
    "    diff = cv2.absdiff(np.float32(smooth_frame), np.float32(running_avg))\n",
    "    cv2.accumulateWeighted(np.float32(smooth_frame), running_avg, alpha)\n",
    "    _, subtracted = cv2.threshold(diff, thresh, 1, cv2.THRESH_BINARY)\n",
    "\n",
    "    left_area = subtracted[270:400,240:340] \n",
    "    right_area = subtracted[270:400,540:640] \n",
    "    \n",
    "    left_fraction = sum(sum(left_area))*1.0/(left_area.shape[0]*left_area.shape[1])\n",
    "    right_fraction = sum(sum(right_area))*1.0/(right_area.shape[0]*right_area.shape[1])\n",
    "    \n",
    "    left_fractions.append(left_fraction)\n",
    "    right_fractions.append(right_fraction)\n",
    "    \n",
    "    # Update the history with whether the vehicle detection criteria was met on either side\n",
    "    history.loc[len(history)+1] = [left_fraction>area_thresh, right_fraction>area_thresh]\n",
    "    \n",
    "    # Get how many of last n frames had a vehicle detected for left and right ROIs\n",
    "    left_cum, right_cum = history.tail(history_length).sum()\n",
    "    \n",
    "    # If all of last n frames had vehicle detected on at least one side\n",
    "    if left_cum >= history_length or right_cum >= history_length: \n",
    "        # If a vehicle was detected longer on the left, then it is south bound\n",
    "        if left_cum > right_cum:\n",
    "            print ('South bound vehicle beginning at frame', j-history_length)\n",
    "        else: \n",
    "            print ('North bound vehicle beginning at frame', j-history_length)\n",
    "        \n",
    "        train = history.tail(history_length).head(10)\n",
    "        \n",
    "        # Reset the history to be able to detect a new vehicle\n",
    "        history = pd.DataFrame(columns=['Detected left','Detected right'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
